var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"/docs/anexos/glosario/",title:"Anexo A: Glosario",description:"TODO",content:""},{id:1,href:"/docs/apps-web/intro/",title:"Intro a Aplicaciones Web",description:"TODO",content:""},{id:2,href:"/docs/cripto-moderna/intro/",title:"Intro a Criptografía Moderna",description:"TODO",content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eDebido tanto al \u003cem\u003etecnooptimismo\u003c/em\u003e de sus creadores como a las limitaciones tecnológicas de la época, la Internet se pensó inicialmente como una red pública, en la que potencialmente cualquier par de computadores pudiese comunicarse de forma fácil y directa, sin importar en qué lugar geográfico se encontrasen o si compartían proveedor de Internet. Eran tiempos más simples, en los que la información que fluía por ahí no era necesariamente muy importante, o al menos la gente que podía ser capaz de interceptarla y leerla era muy poca.\u003c/p\u003e\n\u003cp\u003eSin embargo, a medida ha aumentado la cantidad de usuarios de la Internet y la cantidad de cosas que se puede hacer en ella, y a medida cada vez más gobiernos, delincuentes informáticos y grandes empresas quieren saber qué estas haciendo en cada momento, se ha vuelto indispensable contar con la capacidad de poder decidir quién puede y quién no puede acceder a ciertas comunicaciones que ocurren en estos espacios. Por ejemplo, hoy resultaría completamente inaceptable pensar que los números de la tarjeta de crédito que usas para pagar Netflix pudiesen ser vistos por cualquier persona o máquina que resulte estar por ahí cuando envías tu formulario.\u003c/p\u003e\n\u003cp\u003ePara lograr el objetivo anterior contamos con una herramienta matemática muy útil: la criptografía. El principio es sencillo. La información se \u003cem\u003ecifra\u003c/em\u003e antes de enviar por el canal público, de modo que el receptor pueda \u003cem\u003edescifrarla\u003c/em\u003e usando información privada y que es de común acuerdo con el emisor del mensaje.\u003c/p\u003e\n\u003cp\u003eSi bien los avances criptográficos de los últimos años entregan un nivel alto de protección \u003cem\u003een teoría\u003c/em\u003e, \u003cem\u003een la práctica\u003c/em\u003e suelen haber errores de implementación graves que podrían permitir exfiltrar la información sensible. De estos errores se aprovechan entidades que desean descifrar mensajes sin autorización, obteniendo así la información sensible que buscan, y muchas veces sin que las partes que se comunicaban por el canal se enteren de esta intrusión.\u003c/p\u003e\n\u003cp\u003eEn el contexto de los \u003cstrong\u003eCTFs\u003c/strong\u003e, la resolución de problemas de criptografía moderna suele requerir conocer las primitivas criptográficas utilizadas y algunos conceptos matemáticos que las sustentan. Si bien en general esto le entrega una dificultad particular a esta categoría de problemas al no existir herramientas que automaticen su resolución, también los vuelve más interesantes y suelen contar con un mayor puntaje en comparación a otros problemas.\u003c/p\u003e\n\u003cp\u003eEn la unidad anterior hablamos un poco de la \u0026ldquo;criptografía clásica\u0026rdquo;, la cual suele trabajar con mensajes alfabéticos simples y suele ser muy fácil de romper con ayuda de un computador y algunos algoritmos bastante simples de implementar. La criptografía moderna limita los ataques vistos en el caso de la criptografía clásica, aprovechándose la existencia de problemas matemáticos muy difíciles de resolver \u003cem\u003ea la mala\u003c/em\u003e, en algunos casos incluso con una gran capacidad de cómputo.\u003c/p\u003e\n\u003cp\u003eComo este curso no intenta ser extensivo ni formal en lo que a criptografía se refiere, nos enfocaremos en tres puntos principales: Criptografía simétrica, criptografía asimétrica y \u003cem\u003ehashing\u003c/em\u003e. En el caso de las dos primeras áreas, veremos tanto algoritmos para mantener su confidencialidad y demostrar su autenticidad, mientras que en la tercera área nos enfocaremos en los algoritmos utilizados para la validación de contraseñas en sistemas informáticos.\u003c/p\u003e\n\u003ch2 id=\"bibliografía-útil\"\u003eBibliografía útil\u003c/h2\u003e\n\u003cp\u003eGran parte de las explicaciones teóricas de esta unidad se basan en las del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e de Jean-Phillipe Aumasson. Por lo que si necesitan más información, pueden revisarlo.\u003c/p\u003e\n\u003cp\u003eTambién pueden utilizar el libro \u003cstrong\u003ePractical Cryptography in Python\u003c/strong\u003e como apoyo para la parte de programacion.\u003c/p\u003e\n"},{id:3,href:"/docs/stego/intro/",title:"Intro a la Esteganografía",description:"TODO",content:""},{id:4,href:"/docs/reversa/intro/",title:"Intro a la Ingeniería Reversa",description:"TODO",content:""},{id:5,href:"/docs/osint/intro/",title:"Intro a OSINT",description:"TODO",content:""},{id:6,href:"/docs/forense/intro/",title:"Intro al Análisis Forense",description:"TODO",content:""},{id:7,href:"/docs/pwning/intro/",title:"Intro al Pwning",description:"TODO",content:""},{id:8,href:"/docs/prologo/intro/",title:"Prólogo",description:"TODO",content:""},{id:9,href:"/docs/anexos/herramientas/",title:"Anexo B: Herramientas",description:"TODO",content:""},{id:10,href:"/docs/apps-web/backend/",title:"Backend",description:"TODO",content:""},{id:11,href:"/docs/cripto-moderna/hashing/",title:"Hashing",description:"TODO",content:"\u003cp\u003eLas funciones de \u003cem\u003ehash\u003c/em\u003e son utilizadas como un bloque fundamental en muchos otros componentes criptográficos, tales como firmas digitales, cifrado de llave pública, verificación de integridad de archivos, autentificación de mensajes, contraseñas, entre otros.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../hash.jpg\" alt=\"Función de hash\"\u003e\u003c/p\u003e\n\u003cp\u003eComo muestra la imagen anterior (del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e), una función de hash recibe un mensaje de longitud arbitraria, y devuelve un valor de tamaño fijo (generalmente entre 256 y 512 bits). Al mismo tiempo, una \u0026ldquo;buena función de hash\u0026rdquo; para usos criptográficos es una función que cumple las siguientes características:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn cambio chico en el mensaje provoca un cambio muy grande en el valor devuelto por la función de hash.\u003c/li\u003e\n\u003cli\u003eDado un valor devuelto por la función de hash a partir de un mensaje $M$, es demasiado dificil encontrar un valor que produzca ese valor sin conocer $M$.\u003c/li\u003e\n\u003cli\u003eSi bien es obvio que existen colisiones (es decir, dos mensajes distintos entre sí $M_1$ y $M_2$ tales que $H(M_1) == H(M_2)$), encontrar dos mensajes que colisionen debe ser demasiado difícil.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplos-de-funciones-de-hash\"\u003eEjemplos de Funciones de hash\u003c/h2\u003e\n\u003cp\u003eA continuación se nombrarán algunas funciones de hash usadas ampliamente\u003c/p\u003e\n\u003ch3 id=\"md5\"\u003eMD5\u003c/h3\u003e\n\u003cp\u003eMD5 es un algoritmo de hashing basado en una \u003ca href=\"https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction\"\u003econstrucción Merkle-Damgård\u003c/a\u003e que produce un valor de 128 bits, usando bloques de 512 bits en sus procedimientos internos. Este algoritmo fue creado el año 1992, y ya el 1996 se conocían problemas en él. El año 2004 un grupo de investigadores mostró que MD5 no es resistente a colisiones, además de publicar un método práctico para crear datos con el mismo hash pero distinto contenido (ataques de colisión), lo que hizo que se deprecara como hash seguro. Más información sobre la función de hash se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAtaques conocidos\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Length_extension_attack\"\u003eAtaque de exensión de longitud (a partir de su construcción)\u003c/a\u003e,  \u003ca href=\"https://en.wikipedia.org/wiki/Collision_attack\"\u003eAtaques de Colisión\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"sha-1\"\u003eSHA-1\u003c/h3\u003e\n\u003cp\u003eSHA-1 es una función criptográfica creada el año 1995 y basada al igual que MD5 en una construcción Merkle-Damgård. Esta función produce un valor de salida 160 bits. El año 2011 fue deprecada por el NIST por problemas similares a los encontrados en MD5. Hoy en día, los ataques de prefijo elegido en SHA1 son prácticos. Más información y descripción de ataques en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-1\"\u003eWikipedia\u003c/a\u003e. Al año actual (2021), es factible para una organización con hartos recursos económicos (cientos de miles de dólares) ejecutar un ataque de colisión de hashes.\u003c/p\u003e\n\u003ch3 id=\"sha-2\"\u003eSHA-2\u003c/h3\u003e\n\u003cp\u003eSHA-2 es una función criptográfica creada el año 2001 por la NSA. Usa la misma primitiva que MD5 y SHA-1 (Merkle-Damgård) pero posee seis variaciones distintas de largo de salida: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 y SHA-512-256. Al momento, no se conocen ataques prácticos a este hash. Más información se puede obtener en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-2\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"sha-3\"\u003eSHA-3\u003c/h3\u003e\n\u003cp\u003eSHA-3 es una función criptográfica creada el año 2015 por el NIST. Es internamente diferente a las funciones ya mencionadas porque utiliza una \u003ca href=\"https://en.wikipedia.org/wiki/Sponge_function\"\u003econstrucción de esponja\u003c/a\u003e. Su existencia y estandarización permite que en caso que a futuro se encuentren problemas en la primitiva de SHA-2 (todavía considerada segura), exista una alternativa de uso de fácil modificación que no debiese ser afectada por este problema.\u003c/p\u003e\n\u003ch3 id=\"funciones-de-derivación-de-llaves-kdf\"\u003eFunciones de derivación de llaves (KDF)\u003c/h3\u003e\n\u003cp\u003eEs una categoría de funciones de hash que deriva una o más llaves secretas a partir de una llave principal, usando una función pseudoaleatoria. Estas funciones suelen tener la característica de que sus valores de salida son lentos de verificar (del orden de segundos) debido a que la cantidad de veces que se ejecutan es configurable\u0026quot;, lo que mitiga el riesgo de un ataque de fuerza bruta para detectar la preimagen de un valor dado. La capacidad de configurar las iteraciones también prepara a la función para el futuro, de forma de poder subir este número arbitrariamente a medida las capacidades de los computadores aumentan.\u003c/p\u003e\n\u003cp\u003eOtra medida de mitigación de estas funciones es que requieren para funcionar un valor extra no secreto denominado \u003cstrong\u003esalt\u003c/strong\u003e. El valor \u003cstrong\u003esalt\u003c/strong\u003e es aleatorio y se usa para la generación y verificación del hash con una función KDF. De esta forma, se limita el riesgo de amenazas tales como \u003ca href=\"https://en.wikipedia.org/wiki/Rainbow_table\"\u003erainbow tables\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA continuación se mencionan algunas funciones de tipo KDF:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/PBKDF2\"\u003ePBKDF1 y PBKDF2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Argon2\"\u003eArgon2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:12,href:"/docs/cripto-moderna/cripto-simetrica/",title:"Criptografía Simétrica",description:"TODO",content:"\u003cp\u003eEn esta sección hablaremos de tres tipos de cifrado: \u003cstrong\u003eOne-time pad\u003c/strong\u003e, \u003cstrong\u003ecifradores de bloque\u003c/strong\u003e y \u003cstrong\u003ecifradores de flujo\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"one-time-pad\"\u003eOne-Time Pad\u003c/h2\u003e\n\u003cp\u003eCorresponde a una técnica de cifrado que no puede ser rota si la llave no se reusa, en la cual un mensaje se cifra ejecutando la operación \u003ccode\u003exor\u003c/code\u003e entre un valor aleatorio al menos del tamaño del mensaje y el mismo mensaje. Lamentablemente, este tipo de cifrado no es muy práctico, debido a la dificultad de conseguir una fuente de valores realmente aleatorios que pueda al mismo tiempo estar sincronizada entre las partes que desean comunicarse.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-bloque\"\u003eCifradores de bloque\u003c/h2\u003e\n\u003cp\u003eLos cifadores de bloque permiten cifrar mensajes de un tamaño fijo (\u003cem\u003econocido como $BlockSize$\u003c/em\u003e) utilizando una llave de con otro tamaño fijo (\u003cem\u003econocido como $KeySize$\u003c/em\u003e). Si el mensaje es más largo que la llave, es necesario dividirlo en \u003cstrong\u003ebloques\u003c/strong\u003e del tamaño adecuado y usar un \u003cstrong\u003emodo de operación\u003c/strong\u003e que permita encadenar estos bloques.\u003c/p\u003e\n\u003cp\u003eEl principio básico del proceso de Cifrado $E$ del cifrador de bloque consiste en ejecutar varias rondas de permutación y sustitución definidas sobre el bloque de texto plano $P$, de tal forma de obtener un nuevo bloque cifrado $C$. Las permutaciones y sustituciones son definidas por una llave $K$, la cual es entregada al cifrador de bloque como entrada, además de $C$. Para descifrar un bloque $C$ (proceso de descifrado $D$), se ejecutan operaciones inversas a las de $E$. Lo anterior se puede observar en la imagen siguiente, obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cifrado.jpg\" alt=\"Esquema abstracto de los procesos de cifrado y descifrado\"\u003e\u003c/p\u003e\n\u003cp\u003eUna característica importante para un buen cifrador, es que la salida $C$ no permita derivar nada ni de $K$ ni de $P$. Para esto, las salidas $C$ deben verse como datos aleatorios (es decir, no tener patrones).\u003c/p\u003e\n\u003cp\u003eEl tamaño de la llave es importante para evitar ataques de fuerza bruta sobre el cifrador. Si la llave es pequeña no es una tarea imposible probar descifrar un bloque cifrado con todas las llaves posibles. Una llave de 16 bits requeriría del orden de 65 mil intentos para recorrer el espacio completo de llaves, mientras que una de 32 bits necesitaría 4 mil millones de intentos. Hoy en día es considerada segura una llave de largo 128 o más.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-cifradores-de-bloque\"\u003eTipos de cifradores de bloque\u003c/h3\u003e\n\u003cp\u003eExisten muchos diseños de cifradores de bloque. A continuación mencionaremos algunos de los más conocidos y usados.\u003c/p\u003e\n\u003ch4 id=\"des\"\u003eDES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../des.png\" alt=\"Diagrama de especificación de DES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 1977\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 56 bytes (+ 8 de paridad)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 64 bytes\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 16\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eData Encryption Standard\u003c/strong\u003e es un algoritmo de cifrado simétrico creado por IBM en los 70s. Se publicó como estándar el año 1977, con el tamaño de llave que conocemos. Este tamaño de llave hace que sea completamente factible un ataque de fuerza bruta en unos días, contando con la capacidad computacional adecuada o pagando por un servicio especializado.\u003c/p\u003e\n\u003cp\u003ePueden encontrar una descripción bastante extensiva del algoritmo \u003ca href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\"\u003een Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExiste una versión \u0026ldquo;fortificada\u0026rdquo; denominada \u003cstrong\u003e3DES\u003c/strong\u003e en la cual se aplica 3 veces el algoritmo DES a cada bloque, utilizando hasta 3 llaves ($K_1, K_2, K_3$) de 56 bits distintas, de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e$$C = E_{K_3}(D_{K_2}(E_{K_1}(P)))$$\n$$P = D_{K_1}(E_{K_2}(D_{K_3}(C)))$$\u003c/p\u003e\n\u003cp\u003eSin embargo, esta versión es considerada insegura por el NIST desde el año 2017 debido a la existencia de ataques de colisión, como SWEET32. Más información sobre esta versión pueden encontrarla en \u003ca href=\"https://en.wikipedia.org/wiki/Triple_DES\"\u003ela página de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"aes\"\u003eAES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../aes_rounds.jpg\" alt=\"Rondas AES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 2000\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 128, 192 o 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 128 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 10, 12 o 14\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced Encryption Standard\u003c/strong\u003e es el cifrador de bloque por defecto hoy en día. Dependiendo del tamaño de la llave, consiste en entre 10 y 14 rondas de operaciones de substitución y permutación, tal como se muestra en la figura anterior (obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e)\u003c/p\u003e\n\u003cp\u003ePara mayor información sobre la utilidad de cada ronda, se les recomienda revisar el libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e o la \u003ca href=\"https://es.wikipedia.org/wiki/AES\"\u003epágina de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"modos-de-cifrado\"\u003eModos de Cifrado\u003c/h3\u003e\n\u003cp\u003eDebido a que los cifradores de bloque pueden encargarse de cifrar datos de tamaño igual al tamaño del bloque, es necesario definir estrategias que permitan cifrar información de un largo mucho mayor. Acá entran en juego los \u0026ldquo;modos de cifrado\u0026rdquo;, los cuales definen el algoritmo a usar para realizar el cifrado de la información completa.\u003c/p\u003e\n\u003cp\u003eEn todos los modos que se verán a continuación, se divide el texto completo en bloques de tamaño $BlockSize$. En caso que el texto completo no tenga un tamaño múltiplo de $BlockSize$, se agregan bytes al final de forma de rellenar (\u003cem\u003epadding\u003c/em\u003e) y obtener un texto plano de un tamaño adecuado. Lo anterior genera un problema cuando el texto ya tiene un tamaño múltiplo de $BlockSize$, por lo que en esos casos es necesario agregar un bloque completo, solo con padding.\u003c/p\u003e\n\u003cp\u003eAlgunos tipos de \u003cem\u003epadding\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eANSI X9.23\u003c/strong\u003e: Se rellena con bytes \u003ccode\u003e\\x00\u003c/code\u003e o algún byte al azar, salvo el último byte del bloque rellenado, que incluye como valor la cantidad de bytes usados para rellenar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePKCS7\u003c/strong\u003e: Se rellena con n bytes con el valor $hex(n)$, con $n \\in [1,BlockSize]$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ecb\"\u003eECB\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ecb_enc.png\" alt=\"Cifrado ECB\"\u003e\n\u003cimg src=\"../ecb_enc.png\" alt=\"Descifrado ECB\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eElectronic Codebook\u003c/strong\u003e es el modo de cifrado más simple. Cada bloque se cifra por separado usando siempre la misma llave, concatenándose todo para generar el texto cifrado.\u003c/p\u003e\n\u003ch5 id=\"filtración-de-información-estructural\"\u003eFiltración de información estructural\u003c/h5\u003e\n\u003cp\u003eSi bien este modo es muy fácil de implementar, el mayor problema que posee es que es fácil encontrar patrones en los mensajes si los datos cifrados tienen una estructura que se repite bastante. Un muy buen ejemplo de lo anterior es esta imagen del \u003ca href=\"https://isc.tamu.edu/~lewing/linux/\"\u003ePingüino Tux\u003c/a\u003e, la cual si cifrásemos bloques de ella usando AES/ECB, podríamos ver ciertos patrones con bloques de colores parecidos que delinearían los bordes del pingüino.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../tux.jpg\" alt=\"Tux\"\u003e\n\u003cimg src=\"../tux_ecb.jpg\" alt=\"Tux ECB\"\u003e\u003c/p\u003e\n\u003ch4 id=\"cbc\"\u003eCBC\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../cbc_enc.png\" alt=\"Cifrado CBC\"\u003e\n\u003cimg src=\"../cbc_enc.png\" alt=\"Descifrado CBC\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCipher Block Chaining\u003c/strong\u003e es un modo en el que el cifrado de cada bloque depende del resultado del cifrado del bloque anterior. Como caso especial, el primer bloque utiliza un valor público llamado \u003cem\u003eVector de Inicialización\u003c/em\u003e \u003ccode\u003e(IV)\u003c/code\u003e. Es importante que este valor sea aleatorio en cada sesión de cifrado, con el objetivo de impedir algunos tipos de ataques.\u003c/p\u003e\n\u003cp\u003eEl cambio anterior con respecto a ECB ayuda a que si ciframos exactamente la misma información en dos bloques distintos, el resultado cifrado no sea el mismo, evitando problemas como los vistos con la imagen del pingüino.\u003c/p\u003e\n\u003ch5 id=\"padding-oracle-attack\"\u003ePadding Oracle Attack\u003c/h5\u003e\n\u003cp\u003eSi contamos con feedback acerca del estado de un mensaje cifrado (específicamente, si el mensaje está bien formado o no), es posible ejecutar un ataque denominado \u003ca href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003ePadding Oracle Attack\u003c/a\u003e. En el curso \u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/anexos/padding-oracle/\"\u003eCC5312 Seguridad Computacional\u003c/a\u003e se explica cómo ejecutar este ataque.\u003c/p\u003e\n\u003ch5 id=\"maleabilidad-del-mensaje-cifrado-si-el-iv-no-cambia\"\u003eMaleabilidad del mensaje cifrado si el IV no cambia\u003c/h5\u003e\n\u003cp\u003eSi tanto el IV como la llave se mantienen en un servicio que permite elegir los mensajes a cifrar, es posible armar mensajes cifrados a medida sin necesidad de conocer la llave ni el IV. Veremos cómo hacer esto en las clases.\u003c/p\u003e\n\u003ch4 id=\"ctr\"\u003eCTR\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ctr_enc.png\" alt=\"Cifrado CTR\"\u003e\n\u003cimg src=\"../ctr_enc.png\" alt=\"Descifrado CTR\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCounter Mode\u003c/strong\u003e es un modo que permite paralelizar el cifrado y descifrado de un mensaje, dado que la parte que pasa por el cifrador de bloque es un valor predeterminado y predecible. Además, el descifrado se ejecuta con el algoritmo de cifrado del cifrador de bloque elegido.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-flujo\"\u003eCifradores de Flujo\u003c/h2\u003e\n\u003cp\u003eLos cifradores de flujo intentan emular el uso de un cifrador de tipo \u003cstrong\u003eOne-Time Pad\u003c/strong\u003e, pero usando un generador de números \u003cstrong\u003epseudoaleatorio\u003c/strong\u003e. Estos generadores usan una semilla realmente aleatoria al inicializarse, la cual les permite generar una salida continua extensa que se comporta de forma similar a un flujo de datos realmente aleatoria. Posteriormente, es posible cifrar un stream de datos simplemente haciendo $XOR$ entre los datos y el flujo pseudoaleatorio. Con tal de que ambas partes conozcan la semilla, es posible asegurar la sincronización entre sus flujos aleatorios, con lo que se es posible comunicarse sin problemas y sin filtrar los mensajes.\u003c/p\u003e\n\u003ch3 id=\"el-_nonce_-en-los-cifradores-de-flujo\"\u003eEl \u003cem\u003enonce\u003c/em\u003e en los cifradores de flujo\u003c/h3\u003e\n\u003cp\u003ePartamos mencionando una potencial vulnerabilidad de los cifradores de flujo. Si se usa dos veces el mismo flujo pseudoaleatorio para dos conjuntos de datos (a partir del uso de la misma semilla), y luego se ejecuta la operación $XOR$ entre ambos textos cifrados, se obtendrá como resultado lo siguiente:\u003c/p\u003e\n\u003cp\u003e$$E(P_1) = P_1 \\oplus S$$\n$$E(P_2) = P_2 \\oplus S$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus S) \\oplus (P_2 \\oplus S)$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus P_2)$$\u003c/p\u003e\n\u003cp\u003eAsumiendo que el texto plano tiene cierta estructura, luego no es difícil deducir qué valores corresponden a $P_1$ y $P_2$ a partir de $E(P_1) \\oplus E(P_2)$.\u003c/p\u003e\n\u003cp\u003ePara evitar el problema anterior, los cifradores de flujo suelen recibir un parámetro extra, denominado \u003cem\u003enonce\u003c/em\u003e. Este campo puede ser considerado como público sin que esto signifique disminuir la seguridad del cifrador, pero \u003cstrong\u003edebe ser distinto\u003c/strong\u003e en cada ejecución del algoritmo, por lo que en algunas implementaciones corresponde simplemente a un contador que se incrementa en cada uso del cifrador. En caso que el nonce no siga una generación predecible, es necesario compartirlo entre ambas partes que desean comunicarse.\u003c/p\u003e\n\u003ch3 id=\"rc4\"\u003eRC4\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../rc4.png\" alt=\"Generación Aleatoriedad RC4\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e: Entre 40 y 2048 bits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e: No lleva de forma oficial, aunque se suele agregar como parte de la llave.\u003c/p\u003e\n\u003cp\u003eTambién conocido como \u003cstrong\u003eARCFOUR\u003c/strong\u003e, es un cifrador de flujo diseñado el año 1987 pero filtrado el año 1994. Se comenzó a utilizar como un producto propietario de RSA Security, hasta que en el año 1994 se filtró su especificación en un foro cypherpunk.\u003c/p\u003e\n\u003cp\u003eAl hacerse público su funcionamiento, se empezaron a encontrar varios errores y vulnerabilidades en el algoritmo. Un ejemplo de estos problemas es que los primeros bytes de salida del generador pseudoaleatorio permiten adivinar el estado interno del mismo, derivándose así información sobre la clave.\u003c/p\u003e\n\u003cp\u003eSi bien su diseño no considera el uso de un nonce, éste se suele agregar de alguna de las formas siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHasheando la semilla y el nonce y usando el valor hasheado como semilla. Esta es la forma recomendada.\u003c/li\u003e\n\u003cli\u003eConcatenando la semilla con el nonce. Sin embargo, esto puede traer problemas de aleatoriedad debido a fallas propias de RC4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEs posible encontrar más información sobre este cifrador (y sus problemas) \u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003een wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"chacha\"\u003eChaCha\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../chacha.png\" alt=\"Ronda Chacha\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e 64 bits\u003c/p\u003e\n\u003cp\u003eChaCha es una familia de cifradores de flujo basada en una variante de Salsa20. Estos cifradores definen un estado inicial compuesto por \u0026ldquo;palabras\u0026rdquo; de 32 bit dispuestas en una matriz de 4x4:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e(00) \u003ccode\u003eexpa\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(01) \u003ccode\u003end 3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(02) \u003ccode\u003e2-by\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(03) \u003ccode\u003ete k\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(04) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(05) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(06) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(07) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(08) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(09) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(10) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(11) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(12) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(13) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(14) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(15) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eDonde:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(XX) representa el número del byte (se usa más abajo)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpand 32-byte k\u003c/code\u003e es un texto en ASCII de 16 caracteres (4 \u003ccode\u003ewords\u003c/code\u003e de 32 bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eK\u003c/code\u003e es la llave dividida en 8 bloques de 32 bits cada uno\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eP\u003c/code\u003e (posición) es un contador que lleva cuenta de la cantidad de bloques cifrados.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eN\u003c/code\u003e corresponde a un \u003cem\u003enonce\u003c/em\u003e, es decir, un valor que no debe repetirse entre usos del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSi bien el cifrado es de tipo \u0026ldquo;flujo\u0026rdquo;, los bytes de éste se generan de a bloques de tamaño 512 bits (16 bytes). Para generar el bloque de número $i$, se ejecutan los siguientes pasos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe setean los bytes $P$ del estado \u003ccode\u003earr\u003c/code\u003e en el valor binario de $i$\u003c/li\u003e\n\u003cli\u003eSe ejecuta 10 veces la siguiente operación en pseudocódigo (denominada \u0026ldquo;doble ronda\u0026rdquo;) sobre el estado:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edouble_round\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAcá \u003ccode\u003eQR\u003c/code\u003e o \u003cem\u003e\u0026ldquo;Quarter Round\u0026rdquo;\u003c/em\u003e se define de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eY \u003ccode\u003ex \u0026lt;\u0026lt;\u0026lt;= y\u003c/code\u003e corresponde a una \u0026ldquo;rotación de y bits al valor x\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFinalmente, los valores correspondientes al estado luego de correr 10 veces la \u003cem\u003edouble round\u003c/em\u003e son XOReados con los datos, devolviendo el valor cifrado.\u003c/p\u003e\n\u003cp\u003eEl descifrado se ejecuta de la misma forma, dado que XOR es una operación que se cancela a sí misma al ejecutarse dos veces sobre el mismo texto.\u003c/p\u003e\n\u003ch2 id=\"más-allá-del-cifrado\"\u003eMás allá del cifrado\u003c/h2\u003e\n\u003cp\u003eMuchas veces, el cifrado no es suficiente para asegurar que una comunicación entre dos partes ocurre de forma segura. Un ejemplo: Si un mensaje cifrado no contiene metainformación acerca de cuándo fue mandado, un atacante podría reenviar mensajes de una persona a la otra, haciéndola pensar que se dijo nuevamente algo que en verdad no se dijo. Este ataque se denomina \u003ccode\u003eAtaque de Repetición\u003c/code\u003e (o Replay Attack), y se puede evitar agregando información secuencial al mensaje (por ejemplo, un contador monótono para cada participante).\u003c/p\u003e\n\u003cp\u003eOtro problema que puede ocurrir frente a una comunicación cifrada es que el mensaje sea alterado por un atacante antes de llegar al receptor. En el caso del cifrado de flujo, donde la modificación de un byte del texto cifrado altera solamente un byte del texto plano, una modificación de este estilo podría cambiar el significado del mensaje cifrado en una letra o símbolo. Para evitar este problema, es posible \u0026ldquo;autentificar\u0026rdquo; el mensaje a través de \u0026ldquo;message authentication codes\u0026rdquo; (MACs), los cuales permiten demostrar que el mensaje descifrado no ha sido intervenido de ninguna forma.\u003c/p\u003e\n\u003ch3 id=\"mac\"\u003eMAC\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eMessage Authentication Code\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMAC es el nombre formal de este código extra que se agrega al mensaje cifrado para comprobar su autenticidad. Existen muchas formas de generar un MAC, a continuación nombramos algunas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHMAC\u003c/strong\u003e se genera a partir de una función de Hash.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGCM\u003c/strong\u003e se genera a partir del uso de un cifrador de bloque (Gallois-Counter mode).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePoly1305\u003c/strong\u003e utiliza polinomios y una función extra (AES, un generador como ChaCha20) para generar aleatoriedad a partir de una semilla.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"enfoques-de-autentificación\"\u003eEnfoques de autentificación\u003c/h4\u003e\n\u003cp\u003eLa autentificación del mensaje se podría realizar en tres puntos distintos. A continuación se muestran diagramas sobre cada forma de autentificar:\u003c/p\u003e\n\u003ch5 id=\"encrypt-then-mac-etm\"\u003e\u003cstrong\u003eEncrypt-Then-MAC (EtM)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../etm.png\" alt=\"Encrypt Then MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eCorresponde a autentificar el mensaje ya cifrado. Es necesario usar una llave distintas para evitar ataques como \u003ca href=\"https://en.wikipedia.org/wiki/CBC-MAC#Using_the_same_key_for_encryption_and_authentication\"\u003eel que se menciona acá\u003c/a\u003e\u003c/p\u003e\n\u003ch5 id=\"encrypt-and-mac-em\"\u003e\u003cstrong\u003eEncrypt-And-MAC (E\u0026amp;M)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../eam.png\" alt=\"Encrypt And MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso no hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003ch5 id=\"mac-then-encrypt-mte\"\u003e\u003cstrong\u003eMAC-Then-Encrypt (MtE)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../mte.png\" alt=\"MAC then encrypt\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso tampoco hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003cp\u003eMás información sobre cada enfoque se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#cite_note-14\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"cifrar-y-autentificar-a-la-vez\"\u003eCifrar y autentificar a la vez\u003c/h3\u003e\n\u003cp\u003eExisten ciertos algoritmos para cifrar datos que integran una rutina de autentificación en el proceso de cifrado. Mencionaremos brevemente dos de los más utilizados:\u003c/p\u003e\n\u003ch3 id=\"aes-gcm-bloque\"\u003eAES-GCM (Bloque)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eGalois-Counter Mode\u003c/strong\u003e es un modo de cifrado de bloque que además autentifica el mensaje cifrado. Este modo permite autentificar datos anexos a $P$ que necesiten ser autentificados, pero no cifrados. A esta información adicional no cifrada se le suele denominar $A$.\u003c/p\u003e\n\u003cp\u003e![../gcm.png](Gallois-Counter mode)\u003c/p\u003e\n\u003cp\u003eMás información sobre el algoritmo de autentificación \u003ca href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003een Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"chacha20-poly1305-flujo\"\u003eChaCha20-Poly1305 (Flujo)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChaCha20-Poly1305\u003c/strong\u003e corresponde al uso combinado del cifrador de flujo ChaCha20 y del MAC Poly1305. Su funcionamiento es explicado en el \u003ca href=\"https://tools.ietf.org/html/rfc8439\"\u003eRFC 8439\u003c/a\u003e. Google seleccionó este algoritmo como reemplazo de RC4 en TLS/SSL. Este algoritmo suele preferirse sobre AES-GCM en hardware que no tiene procesadores optimizados para AES.\u003c/p\u003e\n"},{id:13,href:"/docs/cripto-moderna/cripto-asimetrica/",title:"Criptografía Asimétrica",description:"TODO",content:"\u003cp\u003e\u003cimg src=\"../public_key_crypto.png\" alt=\"Criptografía de llave pública\"\u003e\u003c/p\u003e\n\u003cp\u003eLa \u003cstrong\u003ecriptografía asimétrica\u003c/strong\u003e o \u003cstrong\u003ecriptografía de llave pública\u003c/strong\u003e se diferencia de la criptografía simétrica en que se usan valores distintos como llaves de cifrado y descifrado, lo que nos permite publicar una (la de cifrado) con el objetivo de que otras personas puedan enviarnos mensajes que solo nosotros podremos revisar (usando la llave de descifrado). Algo similar ocurre con la criptografía asimétrica usada para firmas digitales. Se usa una llave para \u0026ldquo;demostrar\u0026rdquo; que un mensaje fue enviado por nosotros mientras se publica la otra para comprobar que la firma fue realizada de forma correcta.\u003c/p\u003e\n\u003ch1 id=\"cifrado-de-datos\"\u003eCifrado de datos\u003c/h1\u003e\n\u003ch2 id=\"rsa\"\u003eRSA\u003c/h2\u003e\n\u003ch2 id=\"diffie-hellman\"\u003eDiffie-Hellman\u003c/h2\u003e\n\u003ch2 id=\"curvas-elípticas\"\u003eCurvas Elípticas\u003c/h2\u003e\n\u003ch1 id=\"firmas-digitales\"\u003eFirmas Digitales\u003c/h1\u003e\n\u003ch2 id=\"rsa-1\"\u003eRSA\u003c/h2\u003e\n\u003ch2 id=\"curvas-elípticas-1\"\u003eCurvas Elípticas\u003c/h2\u003e\n"},{id:14,href:"/docs/cripto-moderna/ejercicios/",title:"Ejercicios",description:"TODO",content:"\u003ch2 id=\"hashing\"\u003eHashing\u003c/h2\u003e\n\u003ch2 id=\"criptografía-simétrica\"\u003eCriptografía Simétrica\u003c/h2\u003e\n\u003ch3 id=\"encoding-better\"\u003eEnCoding Better\u003c/h3\u003e\n\u003cp\u003eInterceptamos las comunicaciones del \u003cstrong\u003eFrente Hacker Antorcha\u003c/strong\u003e y obtuvimos este mensaje cifrado. Además, nuestro espía infiltrado logró conseguir el fuente del programa que usan para cifrar sus mensajes. Necesitamos que nos ayudes a recuperar el mensaje en texto plano.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"#\" alt=\"Mensaje Cifrado\"\u003e\n\u003cimg src=\"#\" alt=\"Código Fuente\"\u003e\u003c/p\u003e\n\u003ch3 id=\"hashing-1\"\u003eHashing\u003c/h3\u003e\n"},{id:15,href:"/docs/anexos/",title:"Anexos",description:"TODO",content:""},{id:16,href:"/docs/forense/",title:"Análisis Forense",description:"TODO",content:""},{id:17,href:"/docs/apps-web/",title:"Aplicaciones Web",description:"TODO",content:""},{id:18,href:"/docs/cripto-moderna/",title:"Criptografía moderna",description:"Criptografía simétrica, asimétrica, hashing y firmas",content:""},{id:19,href:"/docs/stego/",title:"Esteganografía",description:"Ocultar información en imágenes, sonidos y archivos de texto.",content:""},{id:20,href:"/docs/reversa/",title:"Ingeniería Reversa",description:"TODO",content:""},{id:21,href:"/docs/osint/",title:"OSINT",description:"TODO",content:""},{id:22,href:"/docs/prologo/",title:"Prólogo",description:"Introducción y definiciones de conceptos",content:""},{id:23,href:"/docs/pwning/",title:"Pwning",description:"TODO",content:""},{id:24,href:"/docs/",title:"Apunte",description:"Apunte del curso CC5325",content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());