<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Auxiliares on</title><link>/auxiliares/</link><description>Recent content in Auxiliares on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="/auxiliares/index.xml" rel="self" type="application/rss+xml"/><item><title>CRIME Attack</title><link>/auxiliares/anexos/crime/</link><pubDate>Thu, 24 Mar 2022 10:00:00 -0300</pubDate><guid>/auxiliares/anexos/crime/</guid><description>CRIME (Compression Ratio Info-leak Made Easy) es una vulnerabilidad encontrada el año 2012, la cual ocurre al utilizar cifrado y compresión al mismo tiempo y que permite exfiltrar información sin conocer la llave de cifrado.
La hipótesis de su existencia fue levantada por Adam Langley, y fue demostrada por los investigadores Juliano Rizzo y Thai Duong (los mismos de la vulnerabilidad BREACH).
Supuestos Atacante tiene control del canal de comunicación.</description></item><item><title>Padding Oracle Attack a CBC</title><link>/auxiliares/anexos/padding-oracle/</link><pubDate>Tue, 24 Mar 2020 10:00:00 -0300</pubDate><guid>/auxiliares/anexos/padding-oracle/</guid><description>Los ataques de tipo Padding Oracle se aprovechan de la estructura de mensajes cifrados en esquemas que utilizan padding para obtener el texto plano de un mensaje cifrado, realizando una cantidad de intentos considerablemente menor que los necesarios para obtenerlo mediante fuerza bruta y sin revelar la clave de cifrado.
El caso específico de padding oracle attack que veremos ahora aplica si se cumplen estas condiciones:
Se usa criptografía simétrica, con cualquier tipo de cifrador de bloque y el modo de operación CBC.</description></item><item><title>Strings y Bytes en Python 3</title><link>/auxiliares/anexos/python-bytes/</link><pubDate>Tue, 24 Mar 2020 10:00:00 -0300</pubDate><guid>/auxiliares/anexos/python-bytes/</guid><description>A continuación explicaremos cómo manejar strings y bytes en Python 3.
Fuente de casi todo este material
Tipo str en Python El tipo str en Python 3 representa una cadena de texto inmutable.
Representación al hacer print Un objeto de tipo str suele ser mostrado entre comillas cuando se le hace print.
&amp;quot;esto es un objeto de tipo str&amp;quot;
Declaración de un str Un str se puede declarar con:
comillas simples: 'hola mundo' comillas dobles: &amp;quot;hola mundo&amp;quot; tres comillas simples (multilínea): &amp;#39;&amp;#39;&amp;#39; texto multi línea &amp;#39;&amp;#39;&amp;#39; Transformar str en bytes Para transformar un objeto de tipo str con encoding UTF-8 en un objeto de tipo bytes, hay que ejecutar el método encode():</description></item><item><title>Uso básico de GDB</title><link>/auxiliares/anexos/gdb/</link><pubDate>Tue, 24 Mar 2020 10:00:00 -0300</pubDate><guid>/auxiliares/anexos/gdb/</guid><description>GDB es una utilidad que permite depurar programas en varios lenguajes de programación. En el curso la usaremos para depurar programas en C.
👉 Para que el programa compilado pueda ser usado de forma adecuada en GDB, necesitan agregar la flag de compilación -g3, la cual almacena en el binario datos especiales para la depuración. Ejecutar un programa en GDB Para ejecutar el código compilado en GDB, se usa el comando env - gdb &amp;lt;nombre_programa&amp;gt;, donde &amp;lt;nombre_programa&amp;gt; es el nombre del programa a depurar.</description></item></channel></rss>